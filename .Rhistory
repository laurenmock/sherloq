new_vals <- seq(from = x_lims[1], to = x_lims[2], length = 20)
new_preds <- predict(all_mods[[final_mod]][[1]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = 2, lty = 2)
plot(lot_1[[col_avg]], lot_1[[col_sd]],
xlab = "Measurand", ylab = "Within-lab Precision", col = 2,
xlim = x_lims, ylim = y_lims, pch = 16)
# and precision model
new_vals <- seq(from = x_lims[1], to = x_lims[2], length = 20)
new_preds <- predict(all_mods[[final_mod]][[1]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = 2, lty = 2)
# plot remaining profiles (if any)
if(n_lots > 1){
# loop through remaining reagent lots
for(l in 2:n_lots){
lot_l <- df[df[[col_lot]] == l,]
points(lot_l[[col_avg]], lot_l[[col_sd]], col = l+1, pch = 16)
# and precision model
new_preds <- predict(all_mods[[final_mod]][[l]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = l+1, lty = 2)
}
}
# linear
lin_mod <- lapply(lots_list, function(x) lm(sd_wl ~ avg, data = x))
# quadratic
quad_mod <- lapply(lots_list, function(x) lm(sd_wl ~ avg + I(avg^2), data = x))
# Sadler
# sadler_mod <- lapply(lots_list, function(x)
#   nls(sd_wl ~ I((a + b*avg)), start = list(a = 0, b = 1), data = sample_df))
sadler_mod <- lin_mod
all_mods <- list(lin_mod, quad_mod, sadler_mod) |> setNames(mod_names)
# find model with lowest AIC for each reagent lot
min_AIC <- vector()
for(l in 1:n_lots){
min_AIC[l] <- c(lapply(lin_mod, AIC)[[l]],
lapply(quad_mod, AIC)[[l]],
lapply(sadler_mod, AIC)[[l]]) |> which.min()
}
# which model is necessary? (most complex of all reagent lots)
mod_nb <- max(min_AIC)
best_mod <- mod_names[mod_nb]
# if user has selected a model
if(model != "lowest AIC"){
final_mod <- model
# warning if this model does not have the lowest AIC
if(best_mod != final_mod){
message(paste0("Warning: ", best_mod, " has a lower AIC than the selected model."))
}
# if user wants model with lowest AIC
}else{
final_mod <- best_mod
}
# set x and y limits for plot
x_lims <- c(min(sample_df[[col_avg]] - 0.1), max(sample_df[[col_avg]]) + 0.1)
y_lims <- c(min(sample_df[[col_sd]] - 0.1), max(sample_df[[col_sd]]) + 0.1)
# plot profile for first reagent lot
lot_1 <- df[df[[col_lot]] == 1,]
plot(lot_1[[col_avg]], lot_1[[col_sd]],
xlab = "Measurand", ylab = "Within-lab Precision", col = 2,
xlim = x_lims, ylim = y_lims, pch = 16)
# and precision model
new_vals <- seq(from = x_lims[1], to = x_lims[2], length = 20)
new_preds <- predict(all_mods[[final_mod]][[1]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = 2, lty = 2)
# plot remaining profiles (if any)
if(n_lots > 1){
# loop through remaining reagent lots
for(l in 2:n_lots){
lot_l <- df[df[[col_lot]] == l,]
points(lot_l[[col_avg]], lot_l[[col_sd]], col = l+1, pch = 16)
# and precision model
new_preds <- predict(all_mods[[final_mod]][[l]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = l+1, lty = 2)
}
}
library(detection)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", 7.5)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", 7.5)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", 7.5, model = "quadratic")
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", 7.5, model = "linear")
library(detection)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", 7.5, model = "linear")
View(df)
View(blank_df)
LoB <- 7.5
LoB + cp*(c(1, .51) %*% summary(pp_model1)$coef[,1])
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
l = 1
# look at each lot separately
lot_l <- df[df[[col_lot]] == l,]
# critical value
N_tot <- nrow(lot_l)
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
col_sample <- "sample"
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
LoB + cp*(c(1, .51)
)
qnorm(pct)
N_tot
K
N = 80
# critical value
N_tot <- N
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
# critical value
N_tot <- N # total number of measurements per reagent lot
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
N_tot-K
1/(4*(N_tot-K))
(1 - (1/(4*(N_tot-K)) ))
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
plot(lot_1[[col_avg]], lot_1[[col_sd]],
main = "Check that precision models fit points well!", xlab = "Measurand", ylab = "Within-lab Precision", col = 2,
xlim = x_lims, ylim = y_lims, pch = 16)
# and precision model
new_vals <- seq(from = x_lims[1], to = x_lims[2], length = 20)
new_preds <- predict(all_mods[[final_mod]][[1]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = 2, lty = 2)
# plot remaining profiles (if any)
if(n_lots > 1){
# loop through remaining reagent lots
for(l in 2:n_lots){
lot_l <- df[df[[col_lot]] == l,]
points(lot_l[[col_avg]], lot_l[[col_sd]], col = l+1, pch = 16)
# and precision model
new_preds <- predict(all_mods[[final_mod]][[l]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = l+1, lty = 2)
}
}
plot(lot_1[[col_avg]], lot_1[[col_sd]],
main = "Check model fit!", xlab = "Measurand", ylab = "Within-lab Precision", col = 2,
xlim = x_lims, ylim = y_lims, pch = 16)
# and precision model
new_vals <- seq(from = x_lims[1], to = x_lims[2], length = 20)
new_preds <- predict(all_mods[[final_mod]][[1]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = 2, lty = 2)
# plot remaining profiles (if any)
if(n_lots > 1){
# loop through remaining reagent lots
for(l in 2:n_lots){
lot_l <- df[df[[col_lot]] == l,]
points(lot_l[[col_avg]], lot_l[[col_sd]], col = l+1, pch = 16)
# and precision model
new_preds <- predict(all_mods[[final_mod]][[l]], new_vals |> as.data.frame() |> setNames("avg"))
lines(new_vals, new_preds, col = l+1, lty = 2)
}
}
LoB_dat <- as.data.frame(LoB) |> setNames("avg")
View(LoB_dat)
LoB_df <- as.data.frame(LoB) |> setNames("avg")
rm(LoB_dat)
LoD <- LoB + cp*predict(all_mods[[final_mod]][[l]], LoB |> as.data.frame() |> setNames("avg"))
LoB <- 0.51
LoD <- LoB + cp*predict(all_mods[[final_mod]][[l]], LoB |> as.data.frame() |> setNames("avg"))
N_tot <- 80*6
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
LoD <- LoB + cp*predict(all_mods[[final_mod]][[l]], LoB |> as.data.frame() |> setNames("avg"))
for(l in 1:n_lots){
# look at each lot separately
lot_l <- df[df[[col_lot]] == l,]
# critical value
N_tot <- N # total number of measurements per reagent lot
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
LoD_vals[l] <- LoB + cp*predict(all_mods[[final_mod]][[l]], LoB |> as.data.frame() |> setNames("avg"))
}
# # loop through each reagent lot
LoD_vals <- list()
for(l in 1:n_lots){
# look at each lot separately
lot_l <- df[df[[col_lot]] == l,]
# critical value
N_tot <- N # total number of measurements per reagent lot
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
LoD_vals[l] <- LoB + cp*predict(all_mods[[final_mod]][[l]], LoB |> as.data.frame() |> setNames("avg"))
}
View(LoD_vals)
View(LoD_vals)
all_mods[[final_mod]]
0.51 + 1.646[0.2801 + 0.0817*(0.51) + 0.0017*(0.51)^2]
0.51 + 1.646*(0.2801 + 0.0817*(0.51) + 0.0017*(0.51)^2)
sample_df <- data.frame(reagent_lot = c(rep("1", 6), rep("2", 6)),
sample = rep(LETTERS[1:6], 2),
avg = c(.69, 1.42, 2.65, 4.08, 6.08, 10.36,
.78, 1.73, 2.89, 3.82, 6.33, 10.92),
sd_wl = c(.39, .39, .46, .55, .64, 1.12,
.29, .54, .55, .63, .82, 1.38))
library(detection)
View(sample_df)
df <- sample_df
col_lot <- "reagent_lot"
# if column for reagent lot is NULL, make a column with a vector of 1s (all lot 1)
if(is.null(col_lot)){
col_lot <- "lot_number"
df[[col_lot]] <- 1
}
View(df)
beta <- 0.05
# percentile
pct <- 1 - beta
# find number of reagent lots
n_lots <- unique(df[[col_lot]]) |> length()
# make reagent lots separate elements in a list
lots_list <- split(df, f = df[[col_lot]])
mod_names <- c("linear", "quadratic", "sadler")
# linear
lin_mod <- lapply(lots_list, function(x) lm(sd_wl ~ avg, data = x))
# quadratic
quad_mod <- lapply(lots_list, function(x) lm(sd_wl ~ avg + I(avg^2), data = x))
# Sadler
# sadler_mod <- lapply(lots_list, function(x)
#   nls(sd_wl ~ I((a + b*avg)), start = list(a = 0, b = 1), data = sample_df))
sadler_mod <- lin_mod
all_mods <- list(lin_mod, quad_mod, sadler_mod) |> setNames(mod_names)
# find model with lowest AIC for each reagent lot
min_AIC <- vector()
for(l in 1:n_lots){
min_AIC[l] <- c(lapply(lin_mod, AIC)[[l]],
lapply(quad_mod, AIC)[[l]],
lapply(sadler_mod, AIC)[[l]]) |> which.min()
}
# which model is necessary? (most complex of all reagent lots)
mod_nb <- max(min_AIC)
best_mod <- mod_names[mod_nb]
# if user has selected a model
if(model != "lowest AIC"){
final_mod <- model
# warning if this model does not have the lowest AIC
if(best_mod != final_mod){
message(paste0("Warning: The ", best_mod, " model has a lower AIC than the selected model."))
}
# if user wants model with lowest AIC
}else{
final_mod <- best_mod
}
model <- "quadratic"
# if user has selected a model
if(model != "lowest AIC"){
final_mod <- model
# warning if this model does not have the lowest AIC
if(best_mod != final_mod){
message(paste0("Warning: The ", best_mod, " model has a lower AIC than the selected model."))
}
# if user wants model with lowest AIC
}else{
final_mod <- best_mod
}
View(quad_mod)
View(quad_mod)
View(quad_mod)
library(detection)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", 7.5)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 7.5, N = 80*6)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 0.51, N = 80*6)
# now calculate what I would get using different measurand concentrations (instead of 0.51, LoB)
mc <- seq(from = .5, to = 1.3, by = .01)
trial_LoD <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = LoB |> as.data.frame() |> setNames("avg"))
# critical value
N_tot <- N # total number of measurements per reagent lot
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
l <- 1
# look at each lot separately
lot_l <- df[df[[col_lot]] == l,]
# critical value
N_tot <- N # total number of measurements per reagent lot
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
N <- 80*6
col_sample <- "sample"
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
# critical value
N_tot <- N # total number of measurements per reagent lot
K <- unique(lot_l[[col_sample]]) |> length() # number of samples
cp <- qnorm(pct) / (1 - (1/(4*(N_tot-K)) ))
trial_LoD <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = LoB |> as.data.frame() |> setNames("avg"))
LoB <- 0.51
trial_LoD <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = LoB |> as.data.frame() |> setNames("avg"))
# fix this to be flexible
mc <- seq(from = .5, to = 1.3, by = .01)
test <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = mc |> as.data.frame() |> setNames("avg"))
test
# fix this to be flexible
mc <- seq(from = .5, to = 1.3, by = .01)
trial_sd <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = mc |> as.data.frame() |> setNames("avg"))
trial_lod <- LoB + cp*trial_sd
bias <- mc - trial_lod
bias
mc[which.min(bias)]
which.min(bias)
mc[which.min(abs(bias))]
abs(bias)
# fix this to be flexible
mc <- seq(from = .5, to = 1.3, by = .01)
trial_sd <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = mc |> as.data.frame() |> setNames("avg"))
trial_sd
trial_lod <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = mc |> as.data.frame() |> setNames("avg"))
#trial_lod <- LoB + cp*trial_sd
bias <- mc - trial_lod
mc[which.min(abs(bias))]
library(detection)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 0.51, N = 80*6)
library(detection)
names(LoD_vals)[l] <- paste0("LoD_lot_", l)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 0.51, N = 80*6)
library(detection)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 0.51, N = 80*6)
library(detection)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 0.51, N = 80*6)
LoB - init_LoD
LoB - init_LoD <- 1.14
init_LoD <- 1.14
init_LoD - LoB
# fix this to be flexible
mc <- seq(from = LoB, to = init_LoD*2, by = .01)
trial_lod <- LoB + cp*predict(all_mods[[final_mod]][[l]],
newdata = mc |> as.data.frame() |> setNames("avg"))
bias <- mc - trial_lod
# find measurand with bias closest to 0
LoD_vals[l] <- mc[which.min(abs(bias))]
mc[which.min(abs(bias))]
always_sep_lots <- FALSE
!always_sep_lots
LoB_vals <- c(1,1)
length(LoB_vals) %in% c(2,3) & !always_sep_lots
# # if 2 or 3 reagent lots and always_sep_lots = FALSE, find the max LoB
# if(length(LoB_vals) %in% c(2,3) & !always_sep_lots){
#   LoB_vals[n_lots + 1] <- unlist(LoB_vals) |> max()
#   names(LoB_vals)[n_lots + 1] <- "LoB_max"
# }
# if 2 or 3 reagent lots, find the max LoB (following CLSI guidelines)
if(length(LoB_vals) %in% c(2,3)){
LoB_vals[n_lots + 1] <- unlist(LoB_vals) |> max()
names(LoB_vals)[n_lots + 1] <- "LoB_max"
}
library(detection)
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 0.51, N = 80*6)
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
lowlvl_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(21.0, 22.8, 28.2, 25.9,
26.4, 28.3, 20.7, 21.9,
24.7, 22.5, 28.5, 29.2,
13.3, 12.6, 18.2, 14.7,
17.8, 14.0, 14.1, 12.5,
11.3, 12.2, 16.2, 13.9,
12.8, 12.9, 17.4, 16.0,
15.9, 14.1, 11.3, 9.4,
10.6, 13.6, 17.6, 14.9,
17.3, 19.2, 21.5, 22.2,
24.1, 25.8, 16.0, 16.4,
24.9, 23.8, 22.1, 26.1,
19.2, 22.7, 28.3, 26.2,
25.1, 30.3, 23.4, 19.2,
26.3, 23.1, 27.5, 30.1,
22.0, 22.5, 21.8, 22.1,
20.3, 21.0, 25.3, 26.0,
27.2, 25.1, 25.3, 25.3,
15.6, 21.2, 14.8, 14.9,
16.0, 15.8, 21.6, 22.8,
15.3, 18.7, 18.3, 19.5,
13.0, 15.9, 9.0, 7.0,
13.4, 8.5, 16.3, 18.1,
12.4, 11.1, 11.3, 10.1,
18.8, 17.6, 14.1, 14.9,
19.2, 15.8, 19.8, 21.4,
18.0, 18.0, 19.6, 23.1,
32.9, 30.4, 29.4, 27.6,
27.7, 30.6, 31.4, 30.4,
32.5, 28.9, 29.8, 35.1))
sample_df <- data.frame(reagent_lot = c(rep("1", 6), rep("2", 6)),
sample = rep(LETTERS[1:6], 2),
avg = c(.69, 1.42, 2.65, 4.08, 6.08, 10.36,
.78, 1.73, 2.89, 3.82, 6.33, 10.92),
sd_wl = c(.39, .39, .46, .55, .64, 1.12,
.29, .54, .55, .63, .82, 1.38))
LoD_precision_profile(sample_df, "reagent_lot", "sample", "avg", "sd_wl", LoB = 0.51, N = 80*6)
all(df[[col_sd]]) > 0)
all(df[[col_sd]]) > 0
col_sd <- "sd_wl"
all(df[[col_sd]]) > 0
all(df[[col_sd]] > 0)
df$reagent_lot <- c(rep(1,30), rep(2,30), rep(3,30), rep(4,30))
df <- blank_df
df$reagent_lot <- c(rep(1,30), rep(2,30), rep(3,30), rep(4,30))
LoB(blank_df, "reagent_lot", "sample", "pg.ml")
LoB(df, "reagent_lot", "sample", "pg.ml")
LoB(df, "reagent_lot", "sample", "pg.ml", always_sep_lots = TRUE)
document()
library(devtools)
document()
use_mit_license()
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
lowlvl_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(21.0, 22.8, 28.2, 25.9,
26.4, 28.3, 20.7, 21.9,
24.7, 22.5, 28.5, 29.2,
13.3, 12.6, 18.2, 14.7,
17.8, 14.0, 14.1, 12.5,
11.3, 12.2, 16.2, 13.9,
12.8, 12.9, 17.4, 16.0,
15.9, 14.1, 11.3, 9.4,
10.6, 13.6, 17.6, 14.9,
17.3, 19.2, 21.5, 22.2,
24.1, 25.8, 16.0, 16.4,
24.9, 23.8, 22.1, 26.1,
19.2, 22.7, 28.3, 26.2,
25.1, 30.3, 23.4, 19.2,
26.3, 23.1, 27.5, 30.1,
22.0, 22.5, 21.8, 22.1,
20.3, 21.0, 25.3, 26.0,
27.2, 25.1, 25.3, 25.3,
15.6, 21.2, 14.8, 14.9,
16.0, 15.8, 21.6, 22.8,
15.3, 18.7, 18.3, 19.5,
13.0, 15.9, 9.0, 7.0,
13.4, 8.5, 16.3, 18.1,
12.4, 11.1, 11.3, 10.1,
18.8, 17.6, 14.1, 14.9,
19.2, 15.8, 19.8, 21.4,
18.0, 18.0, 19.6, 23.1,
32.9, 30.4, 29.4, 27.6,
27.7, 30.6, 31.4, 30.4,
32.5, 28.9, 29.8, 35.1))
sample_df <- data.frame(reagent_lot = c(rep("1", 6), rep("2", 6)),
sample = rep(LETTERS[1:6], 2),
avg = c(.69, 1.42, 2.65, 4.08, 6.08, 10.36,
.78, 1.73, 2.89, 3.82, 6.33, 10.92),
sd_wl = c(.39, .39, .46, .55, .64, 1.12,
.29, .54, .55, .63, .82, 1.38))
