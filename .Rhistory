ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey30")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey50")
abline(h = .95, col = 'red', lty = 2)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x",
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey80")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey50")
abline(h = .95, col = 'red', lty = 2)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x",
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey70")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey70")
abline(h = .95, col = 'red', lty = 2)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x", pch = 16,
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey70")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey70")
abline(h = .95, col = 'red', lty = 2)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x",
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey70")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey70")
abline(h = .95, col = 'red', lty = 2)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x",
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey70")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey70")
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
abline(h = .95, col = 'red', lty = 2)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x", pch = 16,
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey70")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey70")
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
abline(h = .95, col = 'red', lty = 2)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x", pch = 16,
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey60")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey60")
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
abline(h = .95, col = 'red', lty = 2)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
# percentile
pct <- 1 - beta
# find number of reagent lots
n_lots <- unique(df$lot) |> length()
# if there are more than 3 lots and always_sep_lots = FALSE, reset all reagent lot values to 1
if((n_lots > 3 & !always_sep_lots)){
df$lot <- 1
n_lots <- 1
}
# find hit rate
df$hit_rate <- df$obs_pos / df$tot
# remove rows with concentration of 0
df <- df[df$conc != 0,]
# loop through each reagent lot
LoD_vals <- list()
chisq_p_val <- vector()
plot.new()
par(mfrow = c(1, n_lots),
mar = c(3, 3, 2, 1),
mgp = c(2, 0.5, 0),
tck = -.01)
for(l in 1:n_lots){
# look at each lot separately
lot_l <- df[df$lot == l,]
# fit glm
mod_glm <- glm(cbind(obs_pos, tot - obs_pos) ~ conc, data = lot_l,
family = binomial(link = "probit"))
# check model fit with deviance
chisq_stat <- sum(residuals(mod_glm, type = "pearson")^2)
chisq_p_val[l] <- 1 - pchisq(chisq_stat, df = mod_glm$df.residual)
# use probit inverse to get predicted probabilities and CIs for a range of concentrations
inverse_link <- family(mod_glm)$linkinv
new_vals <- seq(0, 0.5, length = 100)
pred_df <- as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE)[1:2])
pred_df$conc <- new_vals
pred_df$p_hat <- inverse_link(pred_df$fit)
pred_df$lwr <- inverse_link(pred_df$fit - 1.96*pred_df$se.fit)
pred_df$upr <- inverse_link(pred_df$fit + 1.96*pred_df$se.fit)
# plot curves
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x", pch = 16,
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey60")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey60")
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
abline(h = .95, col = 'red', lty = 2)
# find first probability over 95% and set as LoD
LoD_vals[l] <- pred_df[pred_df$p_hat >= pct,]$conc[1]
names(LoD_vals)[l] <- paste0("LoD_lot_", l)
}
hit_rate_plot <- recordPlot()
par(mfrow = c(1,1))
always_sep_lots <- FALSE
# warning about always_sep_lots when n_lots > 3
if(always_sep_lots & length(LoD_vals) > 3){
message("Since there are at least four reagent lots in the data provided, CLSI guidelines
recommend combining all reagent lots. Set `always_sep_lots` = FALSE to obtain a single,
reportable estimate of LoD.")
# if only one LoD value, report as LoB_reported (not LoD_lot_1)
}else if(length(LoD_vals) == 1){
names(LoD_vals)[1] <- "LoD_reported"
# otherwise find max LoD to report
}else{
LoD_vals[n_lots + 1] <- unlist(LoD_vals) |> max()
names(LoD_vals)[n_lots + 1] <- "LoD_reported"
}
# warning about GOF
if(any(chisq_p_val > 0.05)){
message("Warning: Pearson chi-square goodness-of-fit tests indicate that the probit model fit
may be insufficient for at least one reagent lot (p-values: ",
paste(round(chisq_p_val,3), collapse = ", "), ").
Consider a log10 transformation of the concentration values to improve model fit.")
}
# warning about GOF
if(any(chisq_p_val < 0.05)){
message("Warning: Pearson chi-square goodness-of-fit tests indicate that the probit model fit
may be insufficient for at least one reagent lot (p-values: ",
paste(round(chisq_p_val,3), collapse = ", "), ").
Consider a log10 transformation of the concentration values to improve model fit.")
}
output <- list(LoD_vals, hit_rate_plot)
# look at each lot separately
lot_l <- df[df$lot == l,]
# fit glm
mod_glm <- glm(cbind(obs_pos, tot - obs_pos) ~ conc, data = lot_l,
family = binomial(link = "probit"))
# check model fit with deviance
chisq_stat <- sum(residuals(mod_glm, type = "pearson")^2)
chisq_p_val[l] <- 1 - pchisq(chisq_stat, df = mod_glm$df.residual)
# use probit inverse to get predicted probabilities and CIs for a range of concentrations
inverse_link <- family(mod_glm)$linkinv
family(mod_glm)
a <- https://stash.natera.com/projects/BIOS/repos/signatera_mtm_calibration/browse/vignettes/DEV_Linearity_Precision_LoD.Rmd
a <- family(mod_glm)
View(a)
family(mod_glm)$linkinv
new_vals <- seq(0, 0.5, length = 100)
View(probit_df)
new_vals <- seq(0, 1, length = 100)
predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE)
data.frame(conc = new_vals)
predict(mod_glm,
newdata = data.frame(conc = new_vals))
test <- predict(mod_glm,
newdata = data.frame(conc = new_vals))
test <- as.data.frame(test)
View(test)
as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE))
old <- as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE))
new <- test
View(new)
View(old)
pred_df <- as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE)[1:2])
View(pred_df)
View(old)
pred_df$conc <- new_vals
pred_df$conc <- new_vals
pred_df$p_hat <- inverse_link(pred_df$fit)
pred_df$fit
pred_df$p_hat <- inverse_link(pred_df$fit)
View(pred_df)
qnorm(0.2531238)
pnorm(0.2531238)
pnorm(0.6930346)
pnorm(38.0854596)
pnorm(3.7724108)
View(lot_l)
l <- 1
# look at each lot separately
lot_l <- df[df$lot == l,]
# fit glm
mod_glm <- glm(cbind(obs_pos, tot - obs_pos) ~ conc, data = lot_l,
family = binomial(link = "probit"))
# check model fit with deviance
chisq_stat <- sum(residuals(mod_glm, type = "pearson")^2)
chisq_p_val[l] <- 1 - pchisq(chisq_stat, df = mod_glm$df.residual)
# use probit inverse to get predicted probabilities and CIs for a range of concentrations
inverse_link <- family(mod_glm)$linkinv
new_vals <- seq(0, 1, length = 100)
pred_df <- as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE)[1:2])
pred_df$conc <- new_vals
pred_df$p_hat <- inverse_link(pred_df$fit)
View(pred_df)
View(probit_df)
par(mfrow = c(1,1))
# fit glm
mod_glm <- glm(cbind(obs_pos, tot - obs_pos) ~ conc, data = lot_l,
family = binomial(link = "probit"))
# check model fit with deviance
chisq_stat <- sum(residuals(mod_glm, type = "pearson")^2)
chisq_p_val[l] <- 1 - pchisq(chisq_stat, df = mod_glm$df.residual)
# use probit inverse to get predicted probabilities and CIs for a range of concentrations
inverse_link <- family(mod_glm)$linkinv
new_vals <- seq(0, 1, length = 100)
pred_df <- as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE)[1:2])
pred_df$conc <- new_vals
pred_df$p_hat <- inverse_link(pred_df$fit)
pred_df$lwr <- inverse_link(pred_df$fit - 1.96*pred_df$se.fit)
pred_df$upr <- inverse_link(pred_df$fit + 1.96*pred_df$se.fit)
with(lot_l,
plot(conc, hit_rate, type = "p", log = "x", pch = 16,
main = paste0("Reagent Lot ", l),
xlab = "Concentration",
ylab = "Hit Rate"))
lines(pred_df$conc,
pred_df$upr,
type="l", col="grey60")
lines(pred_df$conc,
pred_df$lwr,
type="l", col="grey60")
lines(pred_df$conc,
pred_df$p_hat,
type="l", col="black")
abline(h = .95, col = 'red', lty = 2)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
# look at each lot separately
lot_l <- df[df$lot == l,]
# fit glm
mod_glm <- glm(cbind(obs_pos, tot - obs_pos) ~ conc, data = lot_l,
family = binomial(link = "probit"))
# check model fit with deviance
chisq_stat <- sum(residuals(mod_glm, type = "pearson")^2)
chisq_p_val[l] <- 1 - pchisq(chisq_stat, df = mod_glm$df.residual)
# use probit inverse to get predicted probabilities and CIs for a range of concentrations
inverse_link <- family(mod_glm)$linkinv
new_vals <- seq(0, 1, length = 100)
pred_df <- as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE)[1:2])
pred_df$conc <- new_vals
pred_df$p_hat <- inverse_link(pred_df$fit)
pred_df$lwr <- inverse_link(pred_df$fit - 1.96*pred_df$se.fit)
pred_df$upr <- inverse_link(pred_df$fit + 1.96*pred_df$se.fit)
View(pred_df)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
noZero <- probit_df |> subset(conc != 0)
noZero <- probit_df |> subset(concentration != 0)
View(noZero)
i <- 1
noZero$obs_positives[i]
rep(1, noZero$obs_positives[i])
noZero$tot_calls[i]
noZero$obs_positives[i]
rep(0, noZero$tot_calls[i] - noZero$obs_positives[i])
one_or_zero[[i]] <- c(rep(1, noZero$obs_positives[i]),
rep(0, noZero$tot_calls[i] - noZero$obs_positives[i]))
# loop through each row and expand data
one_or_zero <- list()
concentrations <- list()
# loop through each row and expand data
one_or_zero <- list()
concentrations <- list()
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
nz <- probit_df |> subset(concentration != 0)
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
View(one_or_zero)
one_or_zero[[1]]
concentrations[[i]] <- rep(nz$concentration, length(one_or_zero[[i]]))
concentrations[[1]]
concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
concentrations[[1]]
# loop through each row and expand data
one_or_zero <- list()
concentrations <- list()
for(i in nrow(nz)){
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
for(i in nrow(nz)){
one_or_zero[[i]]$a <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
#concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
one_or_zero[[i]]$b <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
View(one_or_zero)
# loop through each row and expand data
one_or_zero <- list()
concentrations <- list()
for(i in nrow(nz)){
one_or_zero[[i]]$a <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
#concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
#one_or_zero[[i]]$b <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
for(i in nrow(nz)){
one_or_zero[[i]][a] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
#concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
#one_or_zero[[i]]$b <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
for(i in nrow(nz)){
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
unlist(one_or_zero)
for(i in nrow(nz)){
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
unlist(one_or_zero)
one_or_zero
# loop through each row and expand data
one_or_zero <- list()
concentrations <- list()
for(i in nrow(nz)){
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
View(one_or_zero)
View(nz)
i <- 1
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
View(one_or_zero)
i <- 2
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
View(one_or_zero)
one_or_zero[[2]]
# loop through each row and expand data
one_or_zero <- list()
concentrations <- list()
for(i in 1:nrow(nz)){
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
#concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
# loop through each row and expand data
one_or_zero <- list()
concentrations <- list()
for(i in 1:nrow(nz)){
one_or_zero[[i]] <- c(rep(1, nz$obs_positives[i]),
rep(0, nz$tot_calls[i] - nz$obs_positives[i]))
concentrations[[i]] <- rep(nz$concentration[i], length(one_or_zero[[i]]))
}
all_10 <- unlist(one_or_zero)
all_10
all_conc <- unlist(concentrations)
long <- as.data.frame(conc = all_conc, detect = all_10)
long <- as.data.frame(conc = all_conc, detect = all_10)
all_10 <- unlist(one_or_zero)
all_conc <- unlist(concentrations)
long <- as.data.frame(conc = all_conc, detect = all_10)
all_conc
all_10
long <- data.frame(conc = all_conc, detect = all_10)
View(long)
# FIT NEW MODEL
mod_glm_new <- glm(detect ~ conc, data = long,
family = binomial(link = "probit"))
View(mod_glm_new)
# FIT NEW MODEL
mod_glm <- glm(detect ~ conc, data = long,
family = binomial(link = "probit"))
View(lot_l)
rm(nz)
# FIT NEW MODEL
mod_glm <- glm(detect ~ conc, data = long,
family = binomial(link = "probit"))
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
View(lot_l)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
mod_glm <- glm(detect ~ conc, data = long,
family = binomial(link = "probit"))
View(mod_glm)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
View(pred_df)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
library(detection)
summary(mod_glm)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
mod_glm <- glm(cbind(obs_pos, tot) ~ conc, data = lot_l,
family = binomial(link = "probit"))
View(mod_glm)
# check model fit with deviance
chisq_stat <- sum(residuals(mod_glm, type = "pearson")^2)
chisq_p_val[l] <- 1 - pchisq(chisq_stat, df = mod_glm$df.residual)
# use probit inverse to get predicted probabilities and CIs for a range of concentrations
inverse_link <- family(mod_glm)$linkinv
new_vals <- seq(0, 1, length = 1000)
pred_df <- as.data.frame(predict(mod_glm,
newdata = data.frame(conc = new_vals),
se.fit = TRUE)[1:2])
pred_df$conc <- new_vals
pred_df$p_hat <- inverse_link(pred_df$fit)
pred_df$lwr <- inverse_link(pred_df$fit - 1.96*pred_df$se.fit)
pred_df$upr <- inverse_link(pred_df$fit + 1.96*pred_df$se.fit)
View(pred_df)
library(detection)
LoD_probit(probit_df, "reagent_lot", "concentration", "obs_positives", "tot_calls", 0)
pred_df[pred_df$p_hat >= pct,]
