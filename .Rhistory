# }
return(LoB_val)
}
LoB(df, parametric = TRUE)
LoB(df)
?match.arg
LoB <- function(df, alpha=0.05, parametric = c(FALSE, TRUE), x_col = day){
x_col_sym <- rlang::ensym(x_col)
#parametric <- match.arg(parametric)
# non-parametric
#if(parametric == FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
#}
# parametric
# else{
#
#   LoB_val <- 1
#
# }
return(LoB_val)
}
LoB(df)
x_col_sym <- rlang::ensym(x_col)
x_col <- "day"
x_col_sym <- rlang::ensym(x_col)
x_col <- df$day
x_col_sym <- rlang::ensym(x_col)
LoB <- function(df, alpha=0.05, parametric = c(FALSE, TRUE)){
parametric <- rlang::ensym(parametric)
#parametric <- match.arg(parametric)
# non-parametric
#if(parametric == FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
#}
# parametric
# else{
#
#   LoB_val <- 1
#
# }
return(LoB_val)
}
LoB(df)
LoB <- function(df, alpha=0.05, parametric = c("FALSE", "TRUE")){
#parametric <- rlang::ensym(parametric)
#parametric <- match.arg(parametric)
# non-parametric
#if(parametric == FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
#}
# parametric
# else{
#
#   LoB_val <- 1
#
# }
return(LoB_val)
}
LoB <- function(df, alpha=0.05, parametric = c("FALSE", "TRUE")){
#parametric <- rlang::ensym(parametric)
#parametric <- match.arg(parametric)
# non-parametric
if(parametric == "FALSE"){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
# else{
#
#   LoB_val <- 1
#
# }
return(LoB_val)
}
LoB(df)
LoB <- function(df, alpha=0.05, parametric = c("FALSE", "TRUE")){
#parametric <- rlang::ensym(parametric)
parametric <- match.arg(parametric)
# non-parametric
if(parametric == "FALSE"){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
# else{
#
#   LoB_val <- 1
#
# }
return(LoB_val)
}
LoB(df)
LoB <- function(df, alpha=0.05, parametric = c("FALSE", "TRUE")){
#parametric <- rlang::ensym(parametric)
parametric <- match.arg(parametric)
# non-parametric
if(parametric == "FALSE"){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
else{
LoB_val <- 1
}
return(LoB_val)
}
LoB(df)
LoB(df, parametric == "TRUE")
LoB(df, parametric == "TRUE")
LoB(df, parametric == "FALSE")
LoB <- function(df, alpha=0.05, parametric = c("FALSE", "TRUE")){
#parametric <- rlang::ensym(parametric)
#parametric <- match.arg(parametric)
# non-parametric
if(parametric == "FALSE"){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
else{
LoB_val <- 1
}
return(LoB_val)
}
LoB(df)
LoB <- function(df, alpha=0.05, parametric = FALSE){
#parametric <- rlang::ensym(parametric)
#parametric <- match.arg(parametric)
# non-parametric
if(parametric == FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
else{
LoB_val <- 1
}
return(LoB_val)
}
LoB(df)
LoB(df, parametric = TRUE)
LoB(df, parametric = a)
LoB(df, parametric = 4)
LoB <- function(df, alpha=0.05, parametric = FALSE){
# non-parametric
if(parametric == FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric == TRUE){
LoB_val <- 1
}
return(LoB_val)
}
LoB(df, parametric = 4)
LoB <- function(df, alpha=0.05, parametric = FALSE){
# non-parametric
if(!parametric){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
LoB_val <- 1
}
return(LoB_val)
}
LoB(df)
LoB(df, parametric = TRUE)
LoB(df, parametric = 4)
parametric <- TRUE
if(parametric){
LoB_val <- 1
}
if(TRUE)
mean <- mean(df$pg.ml)
sd <- sd(df$pg.ml)
# critical value
unique(df$sample)
unique(df$sample) %>% length
cp <- qnorm(0.95)
cp <- qnorm(0.95)/(1 - (1/(4*(B-K))))
# critical value
K <- unique(df$sample) %>% length
cp <- qnorm(0.95)/(1 - (1/(4*(B-K))))
qnorm(0.95)/(1 - (1/(4*(B-K))))
# calculate critical value
J <- 5 # total number of low level samples
L <- 60 # total low level samples across in a single reagent lot
cp <- qnorm(.95)/(1 - (1/(4*(L - J))))
cp <- qnorm(0.95)/(1 - (1/(4*(B-K))))
LoB <- function(df, alpha=0.05, parametric = FALSE){
# non-parametric
if(!parametric){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- sd(df$pg.ml)
# critical value
K <- unique(df$sample) %>% length
cp <- qnorm(0.95)/(1 - (1/(4*(B-K))))
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
LoB(df)
LoB(df, parametric = TRUE)
LoB(df, parametric = TRUE, alpha = 0.1)
LoB <- function(df, alpha=0.05, parametric = FALSE){
# non-parametric
if(!parametric){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- sd(df$pg.ml)
# critical value
K <- unique(df$sample) %>% length
cp <- qnorm(pct) / (1 - (1/(4*(B-K)) ))
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
LoB(df, parametric = TRUE)
LoB(df, parametric = TRUE, alpha = 0.1)
cp <- qnorm(pct) / (1 - (1/(4*(B-K)) ))
LoB <- function(df, alpha=0.05, parametric = FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# non-parametric
if(!parametric){
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- sd(df$pg.ml)
# critical value
K <- unique(df$sample) %>% length
cp <- qnorm(pct) / (1 - (1/(4*(B-K)) ))
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
LoB(df, parametric = TRUE)
LoB(df, parametric = TRUE)
LoB(df, parametric = TRUE, alpha = 0.1)
document()
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
# Lauren!!
df <- blank_df %>% filter(reagent_lot == 1)
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
# Lauren!!
blank_df <- blank_df %>% filter(reagent_lot == 1)
LoB <- function(df, alpha=0.05, parametric = FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# non-parametric
if(!parametric){
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- sd(df$pg.ml)
# critical value
K <- unique(df$sample) %>% length
cp <- qnorm(pct) / (1 - (1/(4*(B-K)) ))
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
LoB(blank_df)
LoB(blank_df, parametric = TRUE)
check()
document()
document()
document()
document()
document()
document()
check()
check()
?qnorm
check()
check()
use_package("stats")
use_package("dplyr")
check()
?mean
?sd
check9
check()
