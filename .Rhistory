4.2, 3.7, 1.4, 1.5))
# Lauren!!
blank_df <- blank_df %>% filter(reagent_lot == 1)
LoB <- function(df, alpha=0.05, parametric = FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# non-parametric
if(!parametric){
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <- sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- sd(df$pg.ml)
# critical value
K <- unique(df$sample) %>% length
cp <- qnorm(pct) / (1 - (1/(4*(B-K)) ))
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
LoB(blank_df)
LoB(blank_df, parametric = TRUE)
check()
document()
document()
document()
document()
document()
document()
check()
check()
?qnorm
check()
check()
use_package("stats")
use_package("dplyr")
check()
?mean
?sd
check9
check()
check()
library(usethis)
check()
library(devtools)
check()
LoB <- function(df, alpha=0.05, parametric = FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# non-parametric
if(!parametric){
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <-
sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- stats::sd(df$pg.ml)
# critical value
K <- unique(df$sample) %>% length
cp <- stats::qnorm(pct) / (1 - (1/(4*(B-K)) ))
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
# Lauren!!
blank_df <- blank_df %>% filter(reagent_lot == 1)
library(dplyr)
# Lauren!!
blank_df <- blank_df %>% filter(reagent_lot == 1)
LoB(blank_df)
document()
rm(LoB)
document()
df <- blank_df
stats::sd(df$pg.ml)
stats::qnorm(0.95)
document()
document()
check()
document()
document()
document()
document()
check()
check()
install()
library(detection)
LoB(df)
LoB(df, parametric = TRUE)
document
document()
rm(blank_df)
with(sample_sd_df, sqrt(((pg.ml.n - 1) %*% pg.ml.sd^2)/sum(pg.ml.n - 1)))
sample_sd_df <- do.call(data.frame,
aggregate(pg.ml ~ sample + reagent_lot, data = lowlvl_df,
FUN = function(x) c(sd = sd(x), n = length(x))))
lowlvl_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(21.0, 22.8, 28.2, 25.9,
26.4, 28.3, 20.7, 21.9,
24.7, 22.5, 28.5, 29.2,
13.3, 12.6, 18.2, 14.7,
17.8, 14.0, 14.1, 12.5,
11.3, 12.2, 16.2, 13.9,
12.8, 12.9, 17.4, 16.0,
15.9, 14.1, 11.3, 9.4,
10.6, 13.6, 17.6, 14.9,
17.3, 19.2, 21.5, 22.2,
24.1, 25.8, 16.0, 16.4,
24.9, 23.8, 22.1, 26.1,
19.2, 22.7, 28.3, 26.2,
25.1, 30.3, 23.4, 19.2,
26.3, 23.1, 27.5, 30.1,
22.0, 22.5, 21.8, 22.1,
20.3, 21.0, 25.3, 26.0,
27.2, 25.1, 25.3, 25.3,
15.6, 21.2, 14.8, 14.9,
16.0, 15.8, 21.6, 22.8,
15.3, 18.7, 18.3, 19.5,
13.0, 15.9, 9.0, 7.0,
13.4, 8.5, 16.3, 18.1,
12.4, 11.1, 11.3, 10.1,
18.8, 17.6, 14.1, 14.9,
19.2, 15.8, 19.8, 21.4,
18.0, 18.0, 19.6, 23.1,
32.9, 30.4, 29.4, 27.6,
27.7, 30.6, 31.4, 30.4,
32.5, 28.9, 29.8, 35.1))
df <- lowlvl_df %>% filter(reagent_lot == 1)
# pooled standard deviation across samples
sample_sd_df <- do.call(data.frame,
aggregate(pg.ml ~ sample + reagent_lot, data = lowlvl_df,
FUN = function(x) c(sd = sd(x), n = length(x))))
View(sample_sd_df)
# pooled standard deviation across samples
sample_sd_df <- do.call(data.frame,
aggregate(pg.ml ~ sample + reagent_lot, data = df,
FUN = function(x) c(sd = sd(x), n = length(x))))
View(sample_sd_df)
# pooled standard deviation across samples
sample_sd_df <- do.call(data.frame,
aggregate(pg.ml ~ sample, data = df,
FUN = function(x) c(sd = sd(x), n = length(x))))
View(sample_sd_df)
sd_sample_df <- do.call(data.frame,
aggregate(pg.ml ~ sample, data = df,
FUN = function(x) c(sd = sd(x), n = length(x))))
with(sd_sample_df, sqrt(((pg.ml.n - 1) %*% pg.ml.sd^2)/sum(pg.ml.n - 1)))
# standard deviation for each sample
sd_sample_df <- do.call(data.frame,
aggregate(pg.ml ~ sample, data = df,
FUN = function(x) c(sd = sd(x), n = length(x))))
sd_L <- with(sd_sample_df, sqrt(((pg.ml.n - 1) %*% pg.ml.sd^2)/sum(pg.ml.n - 1)))
View(sd_L)
L <- B # double-check this! says across all reagent lots...
J <- unique(df$sample) %>% length
cp <- stats::qnorm(pct) / (1 - (1/(4*(L-J)) ))
# percentile
pct <- 1 - alpha
alpha <- 0.05
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# standard deviation for each sample
sd_sample_df <- do.call(data.frame,
aggregate(pg.ml ~ sample, data = df,
FUN = function(x) c(sd = sd(x), n = length(x))))
# pooled standard deviation
sd_L <- with(sd_sample_df, sqrt(((pg.ml.n - 1) %*% pg.ml.sd^2)/sum(pg.ml.n - 1)))
# critical value
L <- B # double-check this! says across all reagent lots...
J <- unique(df$sample) %>% length
cp <- stats::qnorm(pct) / (1 - (1/(4*(L-J)) ))
document()
?|
?|>
df$pg.ml |> mean()
df$pg.ml |> mean() -> x
x
K <- unique(df$sample) |> length
K <- unique(df$sample) |> length()
check()
?aggregate
check()
document()
check()
check()
?floor
?sort
?unique
?length
?"|>"
?with
document()
check*
check()
document()
check()
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
# Lauren!!
df <- blank_df %>% filter(reagent_lot == 1)
shapiro.test(df$pg.ml)
hist(df$pg.ml)
# test to see if normally distributed
shapiro.test(df$pg.ml)$pval
shapiro.test(df$pg.ml)
a<- shapiro.test(df$pg.ml)
View(a)
shapiro.test(df$pg.ml)$p.value
LoB <- function(df, alpha=0.05, parametric = FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# non-parametric
if(!parametric){
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <-
sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# test to see if normally distributed
if(shapiro.test(df$pg.ml)$p.value < 0.05){
message("careful!")
}
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- stats::sd(df$pg.ml)
# critical value
K <- unique(df$sample) |> length()
cp <- stats::qnorm(pct) / (1 - (1/(4*(B-K)) ))
# calculate LoB
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
LoB(df)
if(shapiro.test(df$pg.ml)$p.value < 0.05){
message("careful!")
}
# test to see if normally distributed
if(shapiro.test(df$pg.ml)$p.value > 0.05){
message("careful!")
}
if(shapiro.test(df$pg.ml)$p.value <= 0.05){
message("careful!")
}
# test to see if normally distributed
if(shapiro.test(df$pg.ml)$p.value <= 0.05){
message("These measurements do not appear to be normally distributed.
Consider performing a log transformation or use the non-parametric approach.")
}
if(shapiro.test(df$pg.ml)$p.value <= 0.05){
message("These measurements do not appear to be normally distributed.Consider performing a log transformation or use the non-parametric approach.")
}
# test to see if normally distributed
if(shapiro.test(df$pg.ml)$p.value <= 0.05){
message("These measurements do not appear to be normally distributed. Consider performing a log transformation or use the non-parametric approach.")
}
rm(LoB)
check()
?shapiro.test
document()
check()
install()
library(detection)
LoB(df)
check()
library(devtools)
document()
document()
check()
install()
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
# Lauren!!
df <- blank_df %>% filter(reagent_lot == 1)
# Lauren!!
df <- blank_df |> filter(reagent_lot == 1)
# This took like 20 minutes to type out
blank_df <- data.frame(reagent_lot = c(rep(1, 12*5), rep(2, 12*5)),
day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
`pg/ml` = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
# Lauren!!
df <- blank_df |> filter(reagent_lot == 1)
# Lauren!!
df <- blank_df |> subset(reagent_lot == 1)
LoB(df)
LoB(df, parametric = TRUE)
?nrow
?unique
?do.call
?aggregate
?with
document()
check()
check()
check()
check()
check()
document()
check()
B = pct = NULL
document()
document()
document()
document()
check()
LoB <- function(df, alpha=0.05, parametric = FALSE){
# percentile
pct <- 1 - alpha
# number of reagents
B <- nrow(df)
# non-parametric
if(!parametric){
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- sort(df$pg.ml)
# interpolate measurement for exact rank position (LoB)
LoB_val <-
sorted[rank_below] + (rank_exact - rank_below)*(sorted[rank_above] - sorted[rank_below])
}
# parametric
if(parametric){
# test to see if normally distributed
if(shapiro.test(df$pg.ml)$p.value <= 0.05){
message("These measurements do not appear to be normally distributed. Consider performing a log transformation or use the non-parametric approach.")
}
# mean and SD
mean_B <- mean(df$pg.ml)
sd_B <- stats::sd(df$pg.ml)
# critical value
K <- unique(df$sample) |> length()
cp <- stats::qnorm(pct) / (1 - (1/(4*(B-K)) ))
# calculate LoB
LoB_val <- mean_B + cp*sd_B
}
return(LoB_val)
}
LoB(df)
LoB(df, parametric = TRUE)
rm(LoB)
install()
LoB(df)
