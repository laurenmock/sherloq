)
#average new intended VAFs by original intended VAF group so each input level doesn't have it's own new intended VAF
IntendedMap2 = IntendedMap %>% group_by(IntendedVAF) %>%
summarise(IntendedVAF_new_Mean = round(mean(IntendedVAF_new),3))
# Only look at cell line data that passed QC and merge in adjusted intended VAFs
PrecData <- Data %>% filter(Sample.type == "cell line", num_pos_targets != "qcfailed") %>%
mutate(Input=if_else(Input<40,10,66))
PrecData = PrecData %>%
mutate(Input=if_else(Input<40,10,66)) %>% left_join(IntendedMap2,by="IntendedVAF") %>%
mutate(OriginalIntendedVAF=IntendedVAF,
IntendedVAF=IntendedVAF_new_Mean)
#write.csv(PrecData, file = "data/DEV_Linearity_Precision_LoD_CELL_LINE_CLEAN")
#write.csv(LoBData, file = "data/DEV_LoB_CLEAN")
#read in lower dilution sample level data for primer set 1 to add to LoD analysis
LoD_LowerDilutionsDat_raw = read.csv("data/DEV_LowerDilutionSampleLevel.csv")
LoD_LowerDilutionsDat = LoD_LowerDilutionsDat_raw %>%
mutate(IntendedVAF = meanvaf_intended*100,
ObsVAF = meanvaf_targetlevel_zeroedout*100,
SampleCall = recode(samplelevel_call,"POSITIVE"=1,"NEGATIVE"=0)) %>%
select(SampleCall,ObsVAF,IntendedVAF)
#read in and clean target level results for both primer sets for lower dilution plate
LoD_LowerDilutionsDat_target_p1_raw = read.csv("data/DEV_LowerDilutionTargetLevel.csv")
LoD_LowerDilutionsDat_target_p1 = LoD_LowerDilutionsDat_target_p1_raw  %>%
mutate(ObsVAF = target_alleleRatio*100,
ObsMeanVAF = details_meanVariantAlleleFrequency*100,
SampPosCalls = details_positiveMutations,
TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0)),
SampleCall = as.numeric(recode(details_overallCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
select(id,ObsVAF,ObsMeanVAF,SampPosCalls,SampleCall,TargetCall,target_type) %>%
group_by(id) %>%
summarize(MeanVAF=mean(ObsVAF),
PositiveTargets=sum(TargetCall))
LoD_LowerDilutionsDat_target_p2_raw = read.csv("data/DEV_LowerDilutionTargetLevel_primer2.csv")
LoD_LowerDilutionsDat_target_p2 = LoD_LowerDilutionsDat_target_p2_raw  %>%
mutate(ObsVAF = target_alleleRatio*100,
ObsMeanVAF = details_meanVariantAlleleFrequency*100,
SampPosCalls = details_positiveMutations,
TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0)),
SampleCall = as.numeric(recode(details_overallCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
select(id,ObsVAF,ObsMeanVAF,SampPosCalls,SampleCall,TargetCall,target_type) %>%
group_by(id) %>%
summarize(MeanVAF=mean(ObsVAF),
PositiveTargets=sum(TargetCall))
LoD_LowerDilutionsDat_raw %>% select(sampleid,meanvaf_intended,meanvaf_targetlevel_zeroedout)
LoD_LowerDilutionsDat_target_p1_raw  %>%
mutate(TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
select(details_lisReference,TargetCall) %>%
group_by(details_lisReference) %>%
summarize(PositiveTargets_p1=sum(TargetCall))
LoD_LowerDilutionsDat_merge = LoD_LowerDilutionsDat_raw %>%
select(sampleid,meanvaf_intended,meanvaf_targetlevel_zeroedout) %>%
left_join(
LoD_LowerDilutionsDat_target_p1_raw  %>%
mutate(TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
rename(sampleid=details_lisReference) %>%
select(sampleid,TargetCall) %>%
group_by(sampleid) %>%
summarize(PositiveTargets_p1=sum(TargetCall)),
by="sampleid") %>%
left_join(
LoD_LowerDilutionsDat_target_p2_raw  %>%
rename(sampleid=details_lisReference) %>%
mutate(TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0)),
sampleid = str_replace(sampleid,"680","679")) %>%
select(sampleid,TargetCall) %>%
group_by(sampleid) %>%
summarize(PositiveTargets_p2=sum(TargetCall)),
by="sampleid")
View(PrecData)
PrecData %>% group_by(OriginalIntendedVAF) %>%
summarize("Original Intended Mean VAF" = round(mean(OriginalIntendedVAF),3),
"Adjusted Intended Mean VAF" = round(mean(IntendedVAF),3),
"Mean Observed Mean VAF" = round(mean(ObsVAF),3)) %>%
select(-c("OriginalIntendedVAF")) %>%
kable()
data(LoDdat_P)
LoDdat_P <- LoDdat_P |>
subset(select = c(IntendedVAF, ObsVAF Reagent, SampleCall))
data(LoDdat_P)
LoDdat_P <- LoDdat_P |>
subset(select = c(IntendedVAF, ObsVAF, Reagent, SampleCall))
head(LoDdat_P, 10) |>
pander()
#knitr::kable()
View(LoDdat_P)
data(LoDdat_P)
LoDdat_P <- LoDdat_P |>
subset(select = c(IntendedVAF, ObsVAF, Reagent, SampleCall))
head(LoDdat_P, 10) |>
pander()
#knitr::kable()
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "IntendedVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
results <- LoD_probit(df = LoDdat_P,
col_lot = "Reagent",
col_conc = "IntendedVAF",
col_01 = "SampleCall",
LoB = 0,
log10_trans = TRUE)
#results$probit_model
results$LoD_values
lapply(results$probit_model, function(x) summary(x)$coef) #|>
#results$probit_model |>
# pander()
head(results$model_predictions, 10) |>
pander()
#knitr::kable()
results <- LoD_probit(df = LoDdat_P,
col_lot = "Reagent",
col_conc = "IntendedVAF",
col_01 = "SampleCall",
LoB = 0,
log10_trans = FALSE)
#results$probit_model
results$LoD_values
lapply(results$probit_model, function(x) summary(x)$coef) #|>
#results$probit_model |>
# pander()
head(results$model_predictions, 10) |>
pander()
#knitr::kable()
results <- LoD_probit(df = LoDdat_P,
col_lot = "Reagent",
col_conc = "IntendedVAF",
col_01 = "SampleCall",
LoB = 0,
log10_trans = TRUE)
#results$probit_model
results$LoD_values
lapply(results$probit_model, function(x) summary(x)$coef) #|>
#results$probit_model |>
# pander()
head(results$model_predictions, 10) |>
pander()
#knitr::kable()
shiny::runApp('~/detection_shiny')
warning("Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong message")
warning("Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong message")
warning("Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong warning")
warning("Looooooooooooooooooooooooooooooooooooooo
ooooooooooooooooooooooooooooooooooooooooo
oooooooooooooooooooooooong warning")
warning("Original error message: simpleWarning:
glm.fit: algorithm did not converge
The GLM algorithm did not converge for lot 2,
likely because most hit rates are very close to 0 or 1.
More measurements are needed in the range of
concentration values for which the hit rate is between
0 and 1.")
library(sherloq)
library(pander)
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "IntendedVAF",
col_01 = "SampleCall",
LoB = 0)
data(LoDdat_P)
LoDdat_P <- LoDdat_P |>
subset(select = c(IntendedVAF, ObsVAF, Reagent, SampleCall))
head(LoDdat_P, 10) |>
pander()
#knitr::kable()
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "IntendedVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "InendedVAF",
col_01 = "SampleCall",
LoB = 0)
warning("The GLM algorithm did not converge for lot 2,
likely because most hit rates are very close to 0 or 1.
More measurements are needed in the range of
concentration values for which the hit rate is between
0 and 1.")
warning("The GLM algorithm did not converge for
lot 2, likely because most hit rates are very
close to 0 or 1. More measurements are needed
in the range of concentration values for which
the hit rate is between 0 and 1.")
warning("The probit models have a better fit on
at least one reagent lot if a log transformation
of the concentration values is performed.
Consider setting `log10_trans` = TRUE.")
library(sherloq)
library(ggplot2)
library(tidyverse)
?rep
rep(c("A", "B", "C", "D", "E"), each = 2)
rep(c("before", "after"), times = 5)
data.frame(time = rep(c("before", "after"), times = 5),
cat = rep(c("A", "B", "C", "D", "E"), each = 2),
pct = c(10,30,50,20,10,10,20,35,10,5))
dat <- data.frame(time = rep(c("before", "after"), times = 5),
cat = rep(c("A", "B", "C", "D", "E"), each = 2),
pct = c(10,30,50,20,10,10,20,35,10,5))
dat <- data.frame(time = rep(c("before", "after"), times = 5),
cat = rep(c("A", "B", "C", "D", "E"), each = 2),
pct = c(10,30,50,20,10,10,20,35,10,5))
View(dat)
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(time))) +
geom_bar()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(time))) +
geom_bar(position = "fill", stat = "identity")
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity")
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
theme_void()
dat <- data.frame(time = rep(c("1st", "2nd"), times = 5),
cat = rep(c("A", "B", "C", "D", "E"), each = 2),
pct = c(10,30,50,20,10,10,20,35,10,5))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("legend",
labels = c("A" = "Project planning",
"B" = "Reading CLSI guidelines",
"C" = "Reviewing old code",
"D" = "Writing project-specific code",
"E" = "Verifying results"))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("legend",
labels = c("A" = "Project planning",
"B" = "Reading CLSI guidelines",
"C" = "Reviewing old code",
"D" = "Writing project-specific code",
"E" = "Verifying results")) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("legend",
labels = c("A" = "Project planning",
"B" = "Reading CLSI guidelines",
"C" = "Reviewing old code",
"D" = "Writing project-specific code",
"E" = "Verifying results"),
values = c("A" = "skyblue",
"B" = "skyblue2",
"C" = "gold",
"D" = "tomato",
"E" = "green")) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("legend",
labels = c("A" = "Project planning",
"B" = "Reading CLSI guidelines",
"C" = "Reviewing old code",
"D" = "Writing project-specific code",
"E" = "Verifying results"),
values = c("A" = "skyblue",
"B" = "purple",
"C" = "gold",
"D" = "tomato",
"E" = "green")) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("H",
labels = c("A" = "Project planning",
"B" = "Reading CLSI guidelines",
"C" = "Reviewing old code",
"D" = "Writing project-specific code",
"E" = "Verifying results"),
values = c("A" = "skyblue",
"B" = "purple",
"C" = "gold",
"D" = "tomato",
"E" = "green")) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("",
labels = c("A" = "Project planning",
"B" = "Reading CLSI guidelines",
"C" = "Reviewing old code",
"D" = "Writing project-specific code",
"E" = "Verifying results"),
values = c("A" = "skyblue",
"B" = "purple",
"C" = "gold",
"D" = "tomato",
"E" = "green")) +
theme_void()
dat <- data.frame(time = rep(c("1st", "2nd"), times = 5),
cat = rep(c("Project planning",
"Reading CLSI guidelines",
"Reviewing old code",
"Writing project-specific code",
"Verifying results"), each = 2),
pct = c(10,30,50,20,10,10,20,35,10,5))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("",
# labels = c("A" = "Project planning",
#            "B" = "Reading CLSI guidelines",
#            "C" = "Reviewing old code",
#            "D" = "Writing project-specific code",
#            "E" = "Verifying results"),
values = c("skyblue",
"purple",
"gold",
"tomato",
"green")) +
theme_void()
dat <- data.frame(time = rep(c("1st", "2nd"), times = 5),
cat = rep(c("Project planning",
"Reading CLSI guidelines",
"Reviewing old code",
"Writing project-specific code",
"Verifying results"), each = 2),
pct = c(10,30,50,20,10,10,20,35,10,5))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("",
values = c("skyblue",
"purple",
"gold",
"tomato",
"green")) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(
values = c("skyblue",
"purple",
"gold",
"tomato",
"green")) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[1:5]) +
theme_void()
pal <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[1:5]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[2:6]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[3:7]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[c(2:5,7)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[c(2,4,3,5,7)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[c(2,3,4,5,7)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void()
dat <- data.frame(time = rep(c("1st", "2nd"), times = 5),
cat = rep(c("Project planning",
"Reading CLSI guidelines",
"Reviewing old code",
"Writing project-specific code",
"Verifying results"), each = 2),
pct = c(10,30,50,20,10,10,20,35,10,5))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
#scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
scale_fill_manual("", values = pal[c(1:5)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void()
dat <- data.frame(time = rep(c("1st", "2nd"), times = 5),
cat = rep(c("Project planning",
"Reading CLSI guidelines",
"Reviewing old code",
"Writing project-specific code",
"Verifying results"), each = 2),
pct = c(10,30,50,20,10,10,20,15,10,5))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "dodge", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void()
dat <- data.frame(time = rep(c("1st", "2nd"), times = 5),
cat = rep(c("Project planning",
"Reading CLSI guidelines",
"Reviewing old code",
"Writing project-specific code",
"Verifying results"), each = 2),
pct = c(10,20,
60,20,
15,10,
20,20,
10,5))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void()
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void() +
theme(legend.key.size = unit(2, 'cm'))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void() +
theme(legend.key.size = unit(1, 'cm'))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void() +
theme(legend.key.size = unit(1, 'cm'),
legend.text = element_text(size=30))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void() +
theme(legend.key.size = unit(1, 'cm'),
legend.text = element_text(size=10))
dat |>
ggplot(aes(x = time, y = pct, fill = as.factor(cat))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual("", values = pal[c(3,2,4,5,7)]) +
theme_void() +
theme(legend.key.size = unit(1, 'cm'),
legend.text = element_text(size=15))
warning("The probit models have a better fit on
at least one reagent lot if a log transformation
of the concentration values is performed.
Consider setting `log10_trans` = TRUE.")
warning("The probit models have a better fit on
at least one reagent lot if a log
transformationof the concentration
values is performed.
Consider setting `log10_trans` = TRUE.")
warning("The probit models have a better fit on
at least one reagent lot if a log
transformationof the concentration
values is performed.
Consider setting `log10_trans` = TRUE.")
warning("The probit models have a better fit on
at least one reagent lot if a log
transformation of the concentration
values is performed.
Consider setting `log10_trans` = TRUE.")
runApp('~/detection_shiny')
