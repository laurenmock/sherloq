4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
library(pander)
install.packages("pander")
library(pander)
LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
library(sherloq)
knitr::opts_chunk$set(echo = TRUE)
LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
?pander
results <- LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
results <- LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
results <- LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
results <- LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
library(sherloq)
library(sherloq)
library(sherloq)
knitr::opts_chunk$set(echo = TRUE)
results$LoB_values
View(results)
df = LoB_df
alpha = 0.05
# percentile
pct <- 1 - alpha
# find number of reagent lots
n_lots <- unique(df$lot) |> length()
# make reagent lots separate elements in a list
lots_list <- split(df, f = df$lot)
# number of results in each lot
B <- sapply(lots_list, nrow)
# exact rank position and nearest integers
rank_exact <- .5 + B*pct
rank_below <- floor(rank_exact)
rank_above <- ceiling(rank_exact)
# sort measurements
sorted <- lapply(lots_list, function(x) sort(x$val))
# don't let rank_above be higher than the length of the sorted data
rank_above <- sapply(1:n_lots, function(x)
ifelse(rank_above[x] > length(sorted[[x]]), length(sorted[[x]]), rank_above))
# interpolate measurement for exact rank position (LoB)
LoB_vals <- lapply(1:n_lots, function(l) sorted[[l]][rank_below[l]] +
(rank_exact[l] - rank_below[l])*(sorted[[l]][rank_above[l]] - sorted[[l]][rank_below[l]]))
graphics::plot.new()
graphics::par(mfrow = c(1, n_lots),
mar = c(3, 3, 2, 1),
mgp = c(2, 0.5, 0),
tck = -.01)
# boxplot
for(l in 1:n_lots){
graphics::boxplot(lots_list[[l]]$val,
main = ifelse(n_lots == 1, "", paste0("Reagent Lot ", l)),
ylab = "Measurement",
ylim = c(min(df$val), max(df$val)))
graphics::abline(h = LoB_vals[l], col = "red", lty = 2)
}
LoB_boxp <- grDevices::recordPlot()
View(LoB_vals)
names(LoB_vals) <- paste0("lot_", 1:n_lots)
View(LoB_vals)
# calculate LoB
LoB_vals <- mean_B + cp*sd_B
# interpolate measurement for exact rank position (LoB)
LoB_vals <- lapply(1:n_lots, function(l) sorted[[l]][rank_below[l]] +
(rank_exact[l] - rank_below[l])*(sorted[[l]][rank_above[l]] - sorted[[l]][rank_below[l]]))
View(LoB_vals)
vec = c(1,2)
nams(vec) = c("first", "next")
names(vec) = c("first", "next")
vec
vec$first
class(results)
class(results$LoB_values)
class(results$LoB_values$lot_1)
names(results$LoB_values$lot_1 <- "")
names(results$LoB_values$lot_1) <- ""
names(results$LoB_values$lot_1)
results$LoB_values$lot_1
View(results)
library(sherloq)
library(htmltools)
knitr::opts_chunk$set(echo = TRUE)
results$LoB_values
results <- LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
results$LoB_values
View(results)
results$LoB_values |> pander()
View(results)
results$LoB_values$reported
results$LoB_values$lot_1
# interpolate measurement for exact rank position (LoB)
LoB_vals <- lapply(1:n_lots, function(l) sorted[[l]][rank_below[l]] +
(rank_exact[l] - rank_below[l])*(sorted[[l]][rank_above[l]] - sorted[[l]][rank_below[l]]))
# interpolate measurement for exact rank position (LoB)
LoB_vals <- sapply(1:n_lots, function(l) sorted[[l]][rank_below[l]] +
(rank_exact[l] - rank_below[l])*(sorted[[l]][rank_above[l]] - sorted[[l]][rank_below[l]]))
View(results)
# interpolate measurement for exact rank position (LoB)
LoB_vals <- sapply(1:n_lots, function(l) sorted[[l]][rank_below[l]] +
(rank_exact[l] - rank_below[l])*(sorted[[l]][rank_above[l]] - sorted[[l]][rank_below[l]]))
as.list(LoB_vals)
myl = as.list(LoB_vals)
View(myl)
names(myl) = ("lot_1","lot_2")
names(myl) = c("lot_1","lot_2")
myl
library(sherloq)
knitr::opts_chunk$set(echo = TRUE)
results <- LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
results$LoB_values |> pander()
View(results)
results$LoB_values$reported
results$LoB_values
class(results$LoB_values)
as.list(results$LoB_values)
# mean and SD
mean_B <- sapply(lots_list, function(x) mean(x$val))
sd_B <- sapply(lots_list, function(x) stats::sd(x$val))
# critical value
K <- sapply(lots_list, function(x) unique(x$sample) |> length())
cp <- stats::qnorm(pct) / (1 - (1/(4*(B-K)) ))
# calculate LoB
LoB_vals <- mean_B + cp*sd_B
library(sherloq)
knitr::opts_chunk$set(echo = TRUE)
results <- LoB(df = LoB_df, col_lot = "lot", col_sample = "sample", col_val = "val")
results$LoB_values |> pander()
View(results)
results$LoB_values$lot_1
?LoB
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = FALSE,
warning = FALSE,
message = FALSE,
error=FALSE)
options(scipen=999)
library(mtm.calibration)
library(VCA)
library(VFP)
library(kableExtra)
library(patchwork)
library(lubridate)
library(stringr)
library(dplyr)
library(ggplot2)
library(purrr)
library(investr)
library(ggpubr)
library(viridis)
setwd(rprojroot::find_rstudio_root_file())
# Load data
Data <- read.csv("data/DEV_Linearity_Precision_LoD.csv")
# Remove Empty Rows
Data<-Data[1:537,]
# Make it looks like Brian's simulated data
# Now columns names are the same as the simulated data
Data$IntendedVAF<-as.numeric(Data$Intended.VAF)*100
Data$ObsVAF<-as.numeric(Data$zeroed_out_meanvaf)*100
Data$HiSeq<-as.numeric(as.factor(Data$HiSeq.Instrument))
Data$Operator<-as.numeric(as.factor(Data$Operator))
Data$Reagent<-as.numeric(as.factor(Data$Reagent.lot))
Data$Plate<-as.numeric(as.factor(Data$Plate..))
Data$SampleCall <- ifelse(Data$samplelevel_calls == "POSITIVE",1, 0)
Data$Input<-Data$Lib.input..ng.
Data$Rep<-Data$Rep
Data$Day<-as.numeric(factor(mday(mdy(str_replace(Data$Day, "/", "-")))))
Data$num_pos_targets<-as.numeric(Data$num_pos_targets)
# Remove unnecessary columns
Data <- Data %>% select(IntendedVAF, ObsVAF, HiSeq, Operator, Reagent, Plate, Rep, Day, SampleCall, Input, Sample.type, num_pos_targets, Sample.description) %>%
#zero-out mean VAFs for samples with a sample-level negative call (this usually happens in LIMS)
mutate(ObsVAF = if_else(SampleCall==0,0,ObsVAF),
Input = if_else(Input==12.9,66,Input)) #correct one error in input values based on double check from Biodev
# For LoB data, only look at healthy donor data that passed QC
LoBData = Data %>% filter(Sample.type == "healthy donor", num_pos_targets != "qcfailed") %>%
mutate(PlasmaSampleNumber=as.numeric(substr(Sample.description,8,8)))
# map old intendeds to new intendeds. This mapping comes from https://docs.google.com/spreadsheets/d/1LIyuYoznRZP9MDxsSauiBDI7unwn3hhdACvygJi87JU/edit#gid=124735047
IntendedMap = tibble(
IntendedVAF = c(0.005,0.01,0.01,0.05,0.05,0.10,0.10,1,1,10,10,20,20,40,40,60,80),
Input = c(10,10,66,10,66,10,66,10,66,10,66,10,66,10,66,66,66),
IntendedVAF_new86 = c(0.011,0.021,0.021,0.107,0.094,0.202,0.187,1.899,1.887,16.930,16.778,31.291,31.067,54.334,54.183,71.907,86.000),
IntendedVAF_new = c(0.01,0.02,0.02,0.1,0.087,0.188,0.174,1.766,1.756,15.749,15.607,29.108,28.899,50.543,50.402,66.891,80)
)
#average new intended VAFs by original intended VAF group so each input level doesn't have it's own new intended VAF
IntendedMap2 = IntendedMap %>% group_by(IntendedVAF) %>%
summarise(IntendedVAF_new_Mean = round(mean(IntendedVAF_new),3))
# Only look at cell line data that passed QC and merge in adjusted intended VAFs
PrecData <- Data %>% filter(Sample.type == "cell line", num_pos_targets != "qcfailed") %>%
mutate(Input=if_else(Input<40,10,66))
PrecData = PrecData %>%
mutate(Input=if_else(Input<40,10,66)) %>% left_join(IntendedMap2,by="IntendedVAF") %>%
mutate(OriginalIntendedVAF=IntendedVAF,
IntendedVAF=IntendedVAF_new_Mean)
#write.csv(PrecData, file = "data/DEV_Linearity_Precision_LoD_CELL_LINE_CLEAN")
#write.csv(LoBData, file = "data/DEV_LoB_CLEAN")
#read in lower dilution sample level data for primer set 1 to add to LoD analysis
LoD_LowerDilutionsDat_raw = read.csv("data/DEV_LowerDilutionSampleLevel.csv")
LoD_LowerDilutionsDat = LoD_LowerDilutionsDat_raw %>%
mutate(IntendedVAF = meanvaf_intended*100,
ObsVAF = meanvaf_targetlevel_zeroedout*100,
SampleCall = recode(samplelevel_call,"POSITIVE"=1,"NEGATIVE"=0)) %>%
select(SampleCall,ObsVAF,IntendedVAF)
#read in and clean target level results for both primer sets for lower dilution plate
LoD_LowerDilutionsDat_target_p1_raw = read.csv("data/DEV_LowerDilutionTargetLevel.csv")
LoD_LowerDilutionsDat_target_p1 = LoD_LowerDilutionsDat_target_p1_raw  %>%
mutate(ObsVAF = target_alleleRatio*100,
ObsMeanVAF = details_meanVariantAlleleFrequency*100,
SampPosCalls = details_positiveMutations,
TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0)),
SampleCall = as.numeric(recode(details_overallCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
select(id,ObsVAF,ObsMeanVAF,SampPosCalls,SampleCall,TargetCall,target_type) %>%
group_by(id) %>%
summarize(MeanVAF=mean(ObsVAF),
PositiveTargets=sum(TargetCall))
LoD_LowerDilutionsDat_target_p2_raw = read.csv("data/DEV_LowerDilutionTargetLevel_primer2.csv")
LoD_LowerDilutionsDat_target_p2 = LoD_LowerDilutionsDat_target_p2_raw  %>%
mutate(ObsVAF = target_alleleRatio*100,
ObsMeanVAF = details_meanVariantAlleleFrequency*100,
SampPosCalls = details_positiveMutations,
TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0)),
SampleCall = as.numeric(recode(details_overallCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
select(id,ObsVAF,ObsMeanVAF,SampPosCalls,SampleCall,TargetCall,target_type) %>%
group_by(id) %>%
summarize(MeanVAF=mean(ObsVAF),
PositiveTargets=sum(TargetCall))
LoD_LowerDilutionsDat_raw %>% select(sampleid,meanvaf_intended,meanvaf_targetlevel_zeroedout)
LoD_LowerDilutionsDat_target_p1_raw  %>%
mutate(TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
select(details_lisReference,TargetCall) %>%
group_by(details_lisReference) %>%
summarize(PositiveTargets_p1=sum(TargetCall))
LoD_LowerDilutionsDat_merge = LoD_LowerDilutionsDat_raw %>%
select(sampleid,meanvaf_intended,meanvaf_targetlevel_zeroedout) %>%
left_join(
LoD_LowerDilutionsDat_target_p1_raw  %>%
mutate(TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0))) %>%
rename(sampleid=details_lisReference) %>%
select(sampleid,TargetCall) %>%
group_by(sampleid) %>%
summarize(PositiveTargets_p1=sum(TargetCall)),
by="sampleid") %>%
left_join(
LoD_LowerDilutionsDat_target_p2_raw  %>%
rename(sampleid=details_lisReference) %>%
mutate(TargetCall = as.numeric(recode(target_targetCall,"POSITIVE"=1,"NEGATIVE"=0)),
sampleid = str_replace(sampleid,"680","679")) %>%
select(sampleid,TargetCall) %>%
group_by(sampleid) %>%
summarize(PositiveTargets_p2=sum(TargetCall)),
by="sampleid")
PrecData %>% group_by(OriginalIntendedVAF) %>%
summarize("Original Intended Mean VAF" = round(mean(OriginalIntendedVAF),3),
"Adjusted Intended Mean VAF" = round(mean(IntendedVAF),3),
"Mean Observed Mean VAF" = round(mean(ObsVAF),3)) %>%
select(-c("OriginalIntendedVAF")) %>%
kable()
# 10ng input R&R
RnR10<-RnR(Observed="ObsVAF",
VCvars=c("Plate"),
LevelVar= "IntendedVAF",
RunID="Plate",
SampleID = "IntendedVAF",  Call="SampleCall",
Data= PrecData %>% filter(Input == 10))
kable(RnR10$Summary_RnR %>% mutate(Observed_mean=round(Observed_mean,3)))
Xticks=c(0.01,0.1,1,10,40,80)
# CV plot by 10ng
CVbyobserved10 <-
ggplot(RnR10$Precision_Profile, aes(x=log(Observed),y= CV,col=PrecType)) +
geom_point(aes(shape=DataType)) +
geom_line(aes(linetype=DataType)) +
labs(color = "", linetype = "", shape = "", y = "% CV", x ="log(mean(Measured Mean VAF))")+
scale_x_continuous(breaks=log(Xticks), labels=Xticks) +
scale_color_viridis(discrete = T, begin = 0, end = 0.75)+
guides(color = guide_legend( override.aes = list(shape = 0, size = 5)))+
ggtitle("% CV") +
ggthemes::theme_gdocs()
#SD plotby 10 ng
SDbyobserved10 <-
ggplot(RnR10$Precision_Profile, aes(x=log(Observed),y= SD,col=PrecType)) +
geom_point(aes(shape=DataType)) +
geom_line(aes(linetype=DataType)) +
labs(color = "", linetype = "", shape = "", y = "SD", x ="log(mean(Measured Mean VAF))")+
scale_color_viridis(discrete = T, begin = 0, end = 0.75)+
scale_x_continuous(breaks=log(Xticks), labels=Xticks) +
guides(color = guide_legend( override.aes = list(shape = 0, size = 5)))+
ggtitle("SD") +
ggthemes::theme_gdocs()
(CVbyobserved10 / SDbyobserved10) +
plot_layout(guides = "collect")+
plot_annotation(  title = "Quantitative Precision at 10 ng DNA Input") & ggthemes::theme_gdocs()
# 66ng input R&R
RnR66<-RnR(Observed="ObsVAF",
VCvars=c("Plate"),
LevelVar= "IntendedVAF",
RunID="Plate",
SampleID = "IntendedVAF",  Call="SampleCall",
Data= PrecData %>% filter(Input == 66))
kable(RnR66$Summary_RnR %>% mutate(Observed_mean=round(Observed_mean,3)))
# CV plot at 66ng
CVbyobserved66 <-
ggplot(RnR66$Precision_Profile, aes(x=log(Observed),y= CV,col=PrecType)) +
geom_point(aes(shape=DataType)) +
geom_line(aes(linetype=DataType)) +
labs(color = "", linetype = "", shape = "", y = "% CV", x ="log(mean(Measured Mean VAF))")+
scale_x_continuous(breaks=log(Xticks), labels=Xticks) +
scale_color_viridis(discrete = T, begin = 0, end = 0.75)+
guides(color = guide_legend( override.aes = list(shape = 0, size = 5)))+
ggtitle("% CV") +
ggthemes::theme_gdocs()
#SD plot at 66ng
SDbyobserved66 <-
ggplot(RnR66$Precision_Profile, aes(x=log(Observed),y= SD,col=PrecType)) +
geom_point(aes(shape=DataType)) +
geom_line(aes(linetype=DataType)) +
labs(color = "", linetype = "", shape = "", y = "SD", x ="log(mean(Measured Mean VAF))")+
scale_color_viridis(discrete = T, begin = 0, end = 0.75)+
scale_x_continuous(breaks=log(Xticks), labels=Xticks) +
guides(color = guide_legend( override.aes = list(shape = 0, size = 5)))+
ggtitle("SD") +
ggthemes::theme_gdocs()
(CVbyobserved66 / SDbyobserved66) +
plot_layout(guides = "collect")+
plot_annotation(  title = "Quantitative Precision at 66 ng DNA Input") & ggthemes::theme_gdocs()
# Combined input R&R
RnR1066<-RnR(Observed="ObsVAF",
VCvars=c("Plate"),
LevelVar="IntendedVAF",
RunID="Plate",
SampleID = "IntendedVAF",Call="SampleCall",
Data=PrecData)
kable(RnR1066$Summary_RnR %>% mutate(Observed_mean=round(Observed_mean,3)))
# CV plot
CVbyobserved <-
ggplot(RnR1066$Precision_Profile, aes(x=log(Observed),y= CV,col=PrecType)) +
geom_point(aes(shape=DataType)) +
geom_line(aes(linetype=DataType)) +
labs(color = "", linetype = "", shape = "", y = "% CV", x ="log(mean(Measured Mean VAF))")+
scale_x_continuous(breaks=log(Xticks), labels=Xticks) +
scale_color_viridis(discrete = T, begin = 0, end = 0.75)+
guides(color = guide_legend( override.aes = list(shape = 0, size = 5)))+
ggtitle("% CV") +
ggthemes::theme_gdocs()
#SD plot
SDbyobserved <-
ggplot(RnR1066$Precision_Profile, aes(x=log(Observed),y= SD,col=PrecType)) +
geom_point(aes(shape=DataType)) +
geom_line(aes(linetype=DataType)) +
labs(color = "", linetype = "", shape = "", y = "SD", x ="log(mean(Measured Mean VAF))")+
scale_color_viridis(discrete = T, begin = 0, end = 0.75)+
scale_x_continuous(breaks=log(Xticks), labels=Xticks) +
guides(color = guide_legend( override.aes = list(shape = 0, size = 5)))+
ggtitle("SD") +
ggthemes::theme_gdocs()
(CVbyobserved / SDbyobserved) +
plot_layout(guides = "collect")+
plot_annotation(  title = "Quantitative Precision:Combined 10 & 66 ng DNA Inputs") & ggthemes::theme_gdocs()
View(LoBData)
saveRDS(LoBData, file = "vignettes/dev_data_clean/LoBData.rds")
knitr::opts_chunk$set(echo = TRUE)
load(file = "vignettes/dev_data_clean.rs")
readRDS(file = "vignettes/dev_data_clean.rs")
readRDS(file = "vignettes/dev_data_clean.rds")
readRDS(file = "vignettes/dev_data_clean/LoBData.rds")
setwd("~/detection/vignettes/dev_data_clean")
ls
ls()
setwd("~/detection/vignettes/dev_data_clean")
pwd()
getwd()
readRDS(file = "LoBData.rds")
readRDS("LoBData.rds")
LoBData <- readRDS("~/detection/vignettes/dev_data_clean/LoBData.rds")
setwd("~/detection")
readRDS(file = "vignettes/dev_data_clean/LoBData.rds")
readRDS("vignettes/dev_data_clean/LoBData.rds")
readRDS("~/detection/vignettes/dev_data_clean/LoBData.rds")
setwd(rprojroot::find_rstudio_root_file())
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = TRUE)
readRDS("vignettes/dev_data_clean/LoBData.rds")
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = TRUE)
setwd(rprojroot::find_rstudio_root_file())
library(sherloq)
library(pander)
readRDS("~detection/vignettes/dev_data_clean/LoBData.rds")
LoBData <- readRDS("~/detection/vignettes/dev_data_clean/LoBData.rds")
readRDS("~/detection/vignettes/dev_data_clean/LoBData.rds")
head(LoBData, 10)
rprojroot::find_rstudio_root_file()
rprojroot::find_rstudio_root_file()
getwd()
setwd(rprojroot::find_rstudio_root_file())
root.dir
rprojroot::find_rstudio_root_file()
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = TRUE)
getwd()
setwd(rprojroot::find_rstudio_root_file())
getwd()
getwd()
setwd(rprojroot::find_rstudio_root_file())
getwd()
getwd()
setwd(rprojroot::find_rstudio_root_file())
getwd()
getwd()
getwd()
setwd(rprojroot::find_rstudio_root_file())
setwd(rprojroot::find_rstudio_root_file())
getwd()
getwd()
rprojroot::find_rstudio_root_file()
readRDS("dev_data_clean/LoBData.rds")
LoBData <- readRDS("dev_data_clean/LoBData.rds")
View(LoBData)
LoBData <- LoBData |>
select(IntendedVAF, ObsVAF, Reagent, Rep, Day, SampleCall, PlasmaSampleNumber)
head(LoBData, 10) |> pander()
?subset
LoBData <- LoBData |>
subset(select = c(IntendedVAF, ObsVAF, Reagent, Rep, Day, SampleCall, PlasmaSampleNumber)))
LoBData <- LoBData |>
subset(select = c(IntendedVAF, ObsVAF, Reagent, Rep, Day, SampleCall, PlasmaSampleNumber))
View(LoBData)
LoBData <- readRDS("dev_data_clean/LoBData.rds")
View(LoBData)
LoBData <- readRDS("dev_data_clean/LoBData.rds")
getwd()
LoBData <- readRDS("dev_data_clean/LoBData.rds")
head(LoBData, 10) |> pander()
LoBData <- readRDS("dev_data_clean/LoBData.rds")
LoBData <- LoBData |>
subset(select = c(IntendedVAF, ObsVAF, Reagent, Rep, Day, SampleCall, PlasmaSampleNumber))
head(LoBData, 10) |> pander()
LoB(df = LoBData, col_lot = NULL, col_sample = "PlasmaSampleNumber", col_value = "ObsVAF")
results <- LoB(df = LoBData, col_lot = NULL, col_sample = "PlasmaSampleNumber", col_value = "ObsVAF")
results <- LoB(df = LoBData, col_lot = Reagent, col_sample = "PlasmaSampleNumber", col_value = "ObsVAF")
results <- LoB(df = LoBData, col_lot = "Reagent", col_sample = "PlasmaSampleNumber", col_value = "ObsVAF")
results$LoB_values
?LoB
library(devtools)
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
library(devtools)
library(sherloq)
results <- LoD_precision_profile(LoD_PP_df, "lot", "sample", "avg", "sd_wl", LoB_val = 0.51, nb_measure = 80)
LoD_PP_df <- data.frame(lot = c(rep("1", 6), rep("2", 6)),
sample = rep(LETTERS[1:6], 2),
avg = c(.69, 1.42, 2.65, 4.08, 6.08, 10.36,
.78, 1.73, 2.89, 3.82, 6.33, 10.92),
sd_wl = c(.39, .39, .46, .55, .64, 1.12, .29, .54, .55, .63,
.82, 1.38)); LoD_PP_df$lot <- as.numeric(LoD_PP_df$lot)
head(LoD_PP_df, 10) |> pander()
library(pander)
LoD_PP_df <- data.frame(lot = c(rep("1", 6), rep("2", 6)),
sample = rep(LETTERS[1:6], 2),
avg = c(.69, 1.42, 2.65, 4.08, 6.08, 10.36,
.78, 1.73, 2.89, 3.82, 6.33, 10.92),
sd_wl = c(.39, .39, .46, .55, .64, 1.12, .29, .54, .55, .63,
.82, 1.38)); LoD_PP_df$lot <- as.numeric(LoD_PP_df$lot)
head(LoD_PP_df, 10) |> pander()
LoD_PP_df <- data.frame(lot = c(rep("1", 6), rep("2", 6)),
sample = rep(LETTERS[1:6], 2),
avg = c(.69, 1.42, 2.65, 4.08, 6.08, 10.36,
.78, 1.73, 2.89, 3.82, 6.33, 10.92),
sd_wl = c(.39, .39, .46, .55, .64, 1.12, .29, .54, .55, .63,
.82, 1.38)); LoD_PP_df$lot <- as.numeric(LoD_PP_df$lot)
head(LoD_PP_df, 10) |> pander()
LoD_PP_df |> pander()
results <- LoD_precision_profile(LoD_PP_df, "lot", "sample", "avg", "sd_wl", LoB_val = 0.51, nb_measure = 80)
results <- LoD_precision_profile(df = LoD_PP_df, col_lot = "lot", col_sample = "sample", col_avg = "avg", col_sd = "sd_wl", LoB_val = 0.51, nb_measure = 80)
results <- LoD_NEW_precision_profile(df = LoD_PP_df, col_lot = "lot", col_sample = "sample", col_avg = "avg", col_sd = "sd_wl", LoB_val = 0.51, nb_measure = 80)
document()
install.packages("devtools")
library(devtools)
document()
.libPaths()
?install.packages
install.packages("devtools", lib = C:/Program Files/R/R-4.2.0/library)
install.packages("devtools", lib = "C:/Program Files/R/R-4.2.0/library")
library(devtools)
remove.packages(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(detection)
library(devtools)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
sessionInfo()
remove.packages(rlang)
