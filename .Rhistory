legend = c("95% Confidence Interval"),
col = "lightgoldenrod1",
lwd = 10,
cex = 1, horiz = TRUE, bty = "n")
# save plot
hit_rate_plot <- grDevices::recordPlot()
graphics::par(mfrow = c(1,1))
# compare model AIC (log transformed vs. not log transformed) for all lots
# if any reagent lots have better model fit with log transform, use log transform
log10_better <- any((AIC_glm - AIC_glm_log10) > 0)
# message for user
if(!log10_trans & log10_better){
warning("The probit models have a better fit on at least one reagent lot if a log transformation
of the concentration values is performed. Consider setting `log10_trans` = TRUE.")
}
# warning about always_sep_lots when n_lots > 3
if(always_sep_lots & length(LoD_vals) > 3){
warning("Since there are at least four reagent lots in the data provided, CLSI guidelines
recommend combining all reagent lots. Set `always_sep_lots` = FALSE to obtain a single,
reportable estimate of LoD.")
# if only one LoD value, report as LoD_reported (not LoD_lot_1)
}else if(length(LoD_vals) == 1){
names(LoD_vals)[1] <- "reported"
# otherwise find max LoD to report
}else{
LoD_vals[n_lots + 1] <- unlist(LoD_vals) |> max()
names(LoD_vals)[n_lots + 1] <- "reported"
}
# warning about GOF
if(any(chisq_p_val < 0.05)){
warning("Pearson chi-square goodness-of-fit tests indicate that the probit model fit
may be insufficient for at least one reagent lot (p-values: ",
paste(round(chisq_p_val,3), collapse = ", "), ").")
}
# add names to make output easier to read
names(mod) <- paste0("lot_", 1:n_lots)
output <- list(mod, hit_rate_plot, pred_df, LoD_vals)
names(output) <- c("probit_model", "hit_rate_plot", "model_predictions", "LoD_values")
View(output)
library(sherloq)
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = TRUE)
#setwd(rprojroot::find_rstudio_root_file())
library(sherloq)
library(pander)
library(kableExtra)
results <- LoD_probit(df = LoD_P_df,
col_lot = "Reagent",
col_conc = "Concentration",
col_obs_pos = "Observed_Positives",
col_tot = "Total_Calls",
LoB = 0)
results$probit_model
results$LoD_values
LoDdat_P <- readRDS("dev_data_clean/LoDdat_P.rds")
LoDdat_P <- LoDdat_P |>
subset(select = c(IntendedVAF, MeanObsVAF, Reagent, SampleCall))
head(LoDdat_P, 10) |> pander()
LoDdat_P_reform <- do.call(data.frame, stats::aggregate(LoDdat_P$SampleCall ~ LoDdat_P$MeanObsVAF,
data = LoDdat_P,
FUN = function(x) c(obs_pos = sum(x),
n = length(x)))) |>
stats::setNames(c("Concentration", "Observed_Positives", "Total_Calls"))
head(LoDdat_P_reform, 10) |> pander()
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "Concentration",
col_obs_pos = "Observed_Positives",
col_tot = "Total_Calls",
LoB = 0)
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
View(LoDdat_P)
df = LoDdat_P
col_lot = NULL
col_conc = "MeanObsVAF"
col_01 = "SampleCall"
LoB = 0
col_obs_pos = NULL
col_tot = NULL
log10_trans = FALSE
beta = 0.05
always_sep_lots = FALSE
# check for missing data
if(!all(stats::complete.cases(df))){
# remove rows with missing values (and give warning)
df <- df[stats::complete.cases(df),]
warning("Ignoring rows with missing values.")
}
# if column for reagent lot is NULL, make a column with a vector of 1s (all lot 1)
if(is.null(col_lot)){
df$lot <- 1
}
# confirm that column names exist in df
stopifnot("`col_lot` is not a column in df" = col_lot %in% names(df))
stopifnot("`col_01` is not a column in df" = col_01 %in% names(df))
stopifnot("`col_conc` is not a column in df" = col_conc %in% names(df))
stopifnot("`col_obs_pos` is not a column in df" = col_obs_pos %in% names(df))
stopifnot("`col_tot` is not a column in df" = col_tot %in% names(df))
# rename columns in df
names(df)[names(df) == col_lot] <- "lot"
names(df)[names(df) == col_01] <- "call"
names(df)[names(df) == col_conc] <- "conc"
names(df)[names(df) == col_obs_pos] <- "obs_pos"
names(df)[names(df) == col_tot] <- "tot"
# confirm that user provided col_01 or col_obs_pos and col_tot
if(is.null(col_01)){
stopifnot("since col_01 is NULL, col_obs_pos and col_tot must both be provided" =
!is.null(col_obs_pos) & !is.null(col_obs_pos))
# otherwise confirm that col_01 is all 0s and 1s
}else{
stopifnot("col_01 must contain only 0s and 1s" = all(df$call %in% c(0,1)))
}
# confirm that columns are numeric
stopifnot("`col_lot` must be numeric" = is.numeric(df$lot))
stopifnot("`col_conc` must be numeric" = is.numeric(df$conc))
if(is.null(col_01)){
stopifnot("`col_obs_pos` must be numeric" = is.numeric(df$obs_pos))
stopifnot("`col_tot` must be numeric" = is.numeric(df$tot))
}
# if user has provided data that is not yet aggregated -- aggregate it!
if(!is.null(col_01)){
df <- do.call(data.frame,
stats::aggregate(df$call ~ df$conc,
data = df,
FUN = function(x) c(obs_pos = sum(x), n = length(x)))) |>
stats::setNames(c("conc", "obs_pos", "tot"))
}
# percentile
pct <- 1 - beta
View(df)
# find number of reagent lots
n_lots <- unique(df$lot) |> length()
# if there are more than 3 lots and always_sep_lots = FALSE, reset all reagent lot values to 1
if((n_lots > 3 & !always_sep_lots)){
df$lot <- 1
n_lots <- 1
}
# find hit rate
df$hit_rate <- df$obs_pos / df$tot
# remove rows with concentration of 0
df <- df[df$conc != 0,]
# log transform concentration vals
df$conc_log10 <- df$conc |> log10()
# make reagent lots separate elements in a list
lots_list <- split(df, f = df$lot)
mod_glm <- lapply(lots_list, function(x)
suppressWarnings(stats::glm(cbind(obs_pos, tot - obs_pos) ~ conc, data = x,
family = stats::binomial(link = "probit"))))
# make reagent lots separate elements in a list
lots_list <- split(df, f = df$lot)
# log transform concentration vals
df$conc_log10 <- df$conc |> log10()
# make reagent lots separate elements in a list
lots_list <- split(df, f = df$lot)
df$lot
View(df)
# if column for reagent lot is NULL, make a column with a vector of 1s (all lot 1)
if(is.null(col_lot)){
df$lot <- 1
}
# check for missing data
if(!all(stats::complete.cases(df))){
# remove rows with missing values (and give warning)
df <- df[stats::complete.cases(df),]
warning("Ignoring rows with missing values.")
}
# confirm that column names exist in df
stopifnot("`col_lot` is not a column in df" = col_lot %in% names(df))
stopifnot("`col_01` is not a column in df" = col_01 %in% names(df))
stopifnot("`col_conc` is not a column in df" = col_conc %in% names(df))
df = LoDdat_P
# check for missing data
if(!all(stats::complete.cases(df))){
# remove rows with missing values (and give warning)
df <- df[stats::complete.cases(df),]
warning("Ignoring rows with missing values.")
}
# confirm that column names exist in df
stopifnot("`col_lot` is not a column in df" = col_lot %in% names(df))
stopifnot("`col_01` is not a column in df" = col_01 %in% names(df))
stopifnot("`col_conc` is not a column in df" = col_conc %in% names(df))
stopifnot("`col_obs_pos` is not a column in df" = col_obs_pos %in% names(df))
stopifnot("`col_tot` is not a column in df" = col_tot %in% names(df))
# if column for reagent lot is NULL, make a column with a vector of 1s (all lot 1)
if(is.null(col_lot)){
df$lot <- 1
}
# rename columns in df
names(df)[names(df) == col_lot] <- "lot"
names(df)[names(df) == col_01] <- "call"
names(df)[names(df) == col_conc] <- "conc"
names(df)[names(df) == col_obs_pos] <- "obs_pos"
names(df)[names(df) == col_tot] <- "tot"
# confirm that user provided col_01 or col_obs_pos and col_tot
if(is.null(col_01)){
stopifnot("since col_01 is NULL, col_obs_pos and col_tot must both be provided" =
!is.null(col_obs_pos) & !is.null(col_obs_pos))
# otherwise confirm that col_01 is all 0s and 1s
}else{
stopifnot("col_01 must contain only 0s and 1s" = all(df$call %in% c(0,1)))
}
# confirm that columns are numeric
stopifnot("`col_lot` must be numeric" = is.numeric(df$lot))
stopifnot("`col_conc` must be numeric" = is.numeric(df$conc))
if(is.null(col_01)){
stopifnot("`col_obs_pos` must be numeric" = is.numeric(df$obs_pos))
stopifnot("`col_tot` must be numeric" = is.numeric(df$tot))
}
# if user has provided data that is not yet aggregated -- aggregate it!
if(!is.null(col_01)){
df <- do.call(data.frame,
stats::aggregate(df$call ~ df$conc + df$lot,
data = df,
FUN = function(x) c(obs_pos = sum(x), n = length(x)))) |>
stats::setNames(c("conc", "obs_pos", "tot"))
}
View(df)
library(sherloq)
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = TRUE)
#setwd(rprojroot::find_rstudio_root_file())
library(sherloq)
library(pander)
library(kableExtra)
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_lot = "Reagent",
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results <- LoD_probit(df = LoDdat_P,
#col_lot = NULL,
col_lot = "Reagent",
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
# col_lot = "Reagent",
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
# col_lot = "Reagent",
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility",
select = -c(PrecType, DataType)) |>
`row.names<-`(NULL) |>
pander()
LoDdat_P <- readRDS("dev_data_clean/LoDdat_P.rds")
LoDdat_P <- LoDdat_P |>
subset(select = c(IntendedVAF, MeanObsVAF, Reagent, SampleCall))
head(LoDdat_P, 10) |> pander()
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
# col_lot = "Reagent",
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
results <- LoD_probit(df = LoDdat_P_lots,
col_lot = "Reagent",
col_conc = "Concentration",
col_01 = "SampleCall",
LoB = 0,
log10_trans = TRUE)
results <- LoD_probit(df = LoDdat_P,
col_lot = "Reagent",
col_conc = "Concentration",
col_01 = "SampleCall",
LoB = 0,
log10_trans = TRUE)
LoDdat_P <- readRDS("dev_data_clean/LoDdat_P.rds")
LoDdat_P <- LoDdat_P |>
subset(select = c(IntendedVAF, MeanObsVAF, Reagent, SampleCall))
head(LoDdat_P, 10) |> pander()
results <- LoD_probit(df = LoDdat_P,
col_lot = NULL,
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0)
results$probit_model
results$LoD_values
results <- LoD_probit(df = LoDdat_P,
col_lot = "Reagent",
col_conc = "MeanObsVAF",
col_01 = "SampleCall",
LoB = 0,
log10_trans = TRUE)
results$probit_model
results$LoD_values
results <- LoD_precision_profile(df = LoDdat_PP,
col_lot = NULL,
col_sample = "Intended",
col_avg = "Observed",
col_sd_wl = "SD",
LoB = 0,
n_measures = 149)
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility",
select = -c(PrecType, DataType)) |>
`row.names<-`(NULL) |>
pander()
results <- LoD_precision_profile(df = LoDdat_PP,
col_lot = NULL,
col_sample = "Intended",
col_avg = "Observed",
col_sd_wl = "SD",
LoB = 0,
n_measures = 149)
LoDdat_PP
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility",
select = -c(PrecType, DataType)) |>
`row.names<-`(NULL) |>
pander()
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility",
select = -c(PrecType, DataType)) |>
`row.names<-`(NULL) |>
pander()
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility") |>
subset(select = -c(PrecType, DataType)) |>
`row.names<-`(NULL) |>
pander()
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility") |>
subset(select = -c(PrecType, DataType)) |>
#`row.names<-`(NULL) |>
pander()
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility") |>
#subset(select = -c(PrecType, DataType)) |>
#`row.names<-`(NULL) |>
pander()
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility")
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility") |>
#subset(select = -c(PrecType, DataType)) |>
#`row.names<-`(NULL) |>
pander()
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility") |>
#subset(select = -c(PrecType, DataType)) |>
#`row.names<-`(NULL) |>
pander()
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility") |>
#subset(select = -c(PrecType, DataType)) |>
#`row.names<-`(NULL) |>
pander()
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility")
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
View(LoDdat_PP)
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility") |>
#subset(select = -c(PrecType, DataType)) |>
#`row.names<-`(NULL) |>
pander()
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility")
LoDdat_PP
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility")
LoDdat_PP <- readRDS("dev_data_clean/LoDdat_PP.rds")
LoDdat_PP <- LoDdat_PP |>
subset(DataType == "Mixed Model" & PrecType == "Reproducibility",
select = -c(PrecType, DataType)) |>
`row.names<-`(NULL)
LoDdat_PP |> pander()
library(sherloq)
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = TRUE)
#setwd(rprojroot::find_rstudio_root_file())
library(sherloq)
library(pander)
library(kableExtra)
LoB_df <- data.frame(Reagent = c(rep(1, 12*5), rep(2, 12*5)),
Day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
Sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
Replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
Measurement = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
head(LoB_df, 10) |>
kable()
knitr::opts_chunk$set(root.dir = rprojroot::find_rstudio_root_file(),
echo = TRUE)
#setwd(rprojroot::find_rstudio_root_file())
library(sherloq)
#library(kableExtra)
LoBData <- readRDS("dev_data_clean/LoBData.rds")
LoBData <- LoBData |>
subset(select = c(IntendedVAF, ObsVAF, Reagent, Rep, Day, SampleCall, PlasmaSampleNumber))
head(LoBData, 10) |> knitr::kable()
LoB_df <- data.frame(Reagent = c(rep(1, 12*5), rep(2, 12*5)),
Day = rep(rep(c(1, 2, 3), each = 4, times = 10)),
Sample = rep(c(1, 2, 3, 4, 5), each = 12, times = 2),
Replicate = rep(c(1, 2, 3, 4), times = 3*5*2),
Measurement = c(2.6, -.8, 5.5, 6.0,
4.5, .6, -2.3, 3.4,
5.9, 7.6, 4.1, -1.4,
1.0, 2.9, 4.9, 8.0,
6.9, 5.0, 3.4, 1.2,
6.5, 5.6, -2.2, 2.3,
-4.4, -3.4, 7.0, 6.9,
4.3, 3.2, -1.4, 4.2,
5.9, 7.6, 3.8, 5.8,
1.5, -1.9, 5.1, 5.7,
4.1, 4.5, -.6, .5,
5.4, 7.6, 4.4, 6.6,
1.2, -.7, 6.1, 5.1,
4.8, 3.3, -2.8, -1.4,
8.7, 3.6, 5.1, 3.5,
4.6, 4.1, 1.6, 3.7,
2.2, .7, 4.6, 2.6,
1.1, -4.4, .9, .7,
9.2, 8.3, 4.8, 5.4,
4.8, 6.3, 5.4, 9.6,
7.7, 3.1, 6.1, 10.0,
6.1, 3.2, 3.9, 1.4,
3.1, 4.1, 1.0, 3.4,
.1, .4, 2.9, -1.6,
4.0, 11.5, 4.5, 3.6,
4.4, 6.8, 7.1, 4.2,
3.7, 3.7, 5.3, 4.5,
4.0, 6.2, -.2, 2.3,
1.6, 2.6, 6.4, 5.7,
4.2, 3.7, 1.4, 1.5))
head(LoB_df, 10) |> knitr::kable()
?kable
?kable
setwd(rprojroot::find_rstudio_root_file())
?fit.vfp
getAnywhere(fit.vfp)
